"""
–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è iPhone
"""
from django.db import models
from django.utils import timezone

class IPhoneGeneration(models.Model):
    """–ü–æ–∫–æ–ª–µ–Ω–∏—è iPhone (13, 14, 15, 16)"""
    number = models.CharField(max_length=10, unique=True)  # 13, 14, 15, 16, 16E
    display_name = models.CharField(max_length=50)  # iPhone 13, iPhone 14, etc.
    created_at = models.DateTimeField(auto_now_add=True)
    
    class Meta:
        verbose_name = "–ü–æ–∫–æ–ª–µ–Ω–∏–µ iPhone"
        verbose_name_plural = "–ü–æ–∫–æ–ª–µ–Ω–∏—è iPhone"
        ordering = ['number']
    
    def __str__(self):
        return self.display_name

class IPhoneVariant(models.Model):
    """–í–∞—Ä–∏–∞–Ω—Ç—ã iPhone (–æ–±—ã—á–Ω—ã–π, Plus, Pro, Pro Max)"""
    name = models.CharField(max_length=20, unique=True)  # "", "Plus", "Pro", "Pro Max"
    display_name = models.CharField(max_length=50)  # iPhone 15, iPhone 15 Plus, etc.
    sort_order = models.IntegerField(default=0)  # –î–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ
    created_at = models.DateTimeField(auto_now_add=True)
    
    class Meta:
        verbose_name = "–í–∞—Ä–∏–∞–Ω—Ç iPhone"
        verbose_name_plural = "–í–∞—Ä–∏–∞–Ω—Ç—ã iPhone"
        ordering = ['sort_order']
    
    def __str__(self):
        return self.display_name

class IPhoneStorage(models.Model):
    """–û–±—ä–µ–º –ø–∞–º—è—Ç–∏ iPhone"""
    capacity = models.CharField(max_length=10, unique=True)  # 128GB, 256GB, 512GB, 1TB
    size_gb = models.IntegerField()  # –î–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    created_at = models.DateTimeField(auto_now_add=True)
    
    class Meta:
        verbose_name = "–û–±—ä–µ–º –ø–∞–º—è—Ç–∏ iPhone"
        verbose_name_plural = "–û–±—ä–µ–º—ã –ø–∞–º—è—Ç–∏ iPhone"
        ordering = ['size_gb']
    
    def __str__(self):
        return self.capacity

class IPhoneColor(models.Model):
    """–¶–≤–µ—Ç–∞ iPhone"""
    name = models.CharField(max_length=30, unique=True)  # Black, White, Blue, etc.
    display_name = models.CharField(max_length=50)  # –î–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    created_at = models.DateTimeField(auto_now_add=True)
    
    class Meta:
        verbose_name = "–¶–≤–µ—Ç iPhone"
        verbose_name_plural = "–¶–≤–µ—Ç–∞ iPhone"
        ordering = ['name']
    
    def __str__(self):
        return self.display_name

class IPhoneCountry(models.Model):
    """–°—Ç—Ä–∞–Ω—ã –¥–ª—è iPhone"""
    flag = models.CharField(max_length=5, unique=True)  # üá∫üá∏, üáØüáµ, etc.
    name = models.CharField(max_length=50)  # –°–®–ê, –Ø–ø–æ–Ω–∏—è, etc.
    code = models.CharField(max_length=5, blank=True)  # 2SIM, etc.
    created_at = models.DateTimeField(auto_now_add=True)
    
    class Meta:
        verbose_name = "–°—Ç—Ä–∞–Ω–∞ iPhone"
        verbose_name_plural = "–°—Ç—Ä–∞–Ω—ã iPhone"
        ordering = ['name']
    
    def __str__(self):
        return f"{self.flag} {self.name}"

class IPhonePrice(models.Model):
    """–¶–µ–Ω—ã –Ω–∞ iPhone"""
    generation = models.ForeignKey(IPhoneGeneration, on_delete=models.CASCADE, related_name='prices')
    variant = models.ForeignKey(IPhoneVariant, on_delete=models.CASCADE, related_name='prices')
    storage = models.ForeignKey(IPhoneStorage, on_delete=models.CASCADE, related_name='prices')
    color = models.ForeignKey(IPhoneColor, on_delete=models.CASCADE, related_name='prices')
    country = models.ForeignKey(IPhoneCountry, on_delete=models.CASCADE, related_name='prices')
    
    price = models.DecimalField(max_digits=10, decimal_places=2)
    source = models.CharField(max_length=200, blank=True)  # –ò—Å—Ç–æ—á–Ω–∏–∫ —Ü–µ–Ω—ã
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        verbose_name = "–¶–µ–Ω–∞ iPhone"
        verbose_name_plural = "–¶–µ–Ω—ã iPhone"
        unique_together = ['generation', 'variant', 'storage', 'color', 'country']
        ordering = ['-created_at']
    
    def __str__(self):
        return f"{self.full_name} - {self.price:,}‚ÇΩ"
    
    @property
    def full_name(self):
        """–ü–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ iPhone"""
        parts = ["iPhone", self.generation.number]
        if self.variant.name:  # –ï—Å–ª–∏ –Ω–µ –æ–±—ã—á–Ω—ã–π
            parts.append(self.variant.name)
        parts.extend([self.storage.capacity, self.color.display_name])
        return " ".join(parts)
    
    @property
    def display_price(self):
        """–¶–µ–Ω–∞ —Å –Ω–∞—Ü–µ–Ω–∫–æ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        from .models import Markup
        markup = Markup.get_current_markup()
        return int(self.price + markup)

class IPhoneBestPrice(models.Model):
    """–õ—É—á—à–∏–µ —Ü–µ–Ω—ã –Ω–∞ iPhone (—Å–∞–º—ã–µ –¥–µ—à–µ–≤—ã–µ)"""
    generation = models.ForeignKey(IPhoneGeneration, on_delete=models.CASCADE)
    variant = models.ForeignKey(IPhoneVariant, on_delete=models.CASCADE)
    storage = models.ForeignKey(IPhoneStorage, on_delete=models.CASCADE)
    color = models.ForeignKey(IPhoneColor, on_delete=models.CASCADE)
    
    best_price = models.ForeignKey(IPhonePrice, on_delete=models.CASCADE, related_name='best_for')
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        verbose_name = "–õ—É—á—à–∞—è —Ü–µ–Ω–∞ iPhone"
        verbose_name_plural = "–õ—É—á—à–∏–µ —Ü–µ–Ω—ã iPhone"
        unique_together = ['generation', 'variant', 'storage', 'color']
        ordering = ['generation__number', 'variant__sort_order', 'storage__size_gb']
    
    def __str__(self):
        return f"–õ—É—á—à–∞—è —Ü–µ–Ω–∞: {self.best_price.full_name} - {self.best_price.price:,}‚ÇΩ"
