#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç Apple —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã
–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ Apple –ø—Ä–∞–π—Å—ã –∏–∑ —Ñ–∞–π–ª–∞ –ø—Ä–∏–º–µ—Ä–æ–≤ –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥
"""

import sys
import re
import asyncio
from pathlib import Path
from collections import defaultdict
from typing import Dict, List, Tuple

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(str(Path(__file__).parent))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä—ã
from parsers.iphone_parser import iphone_parser
from parsers.macbook_parser import macbook_parser
from parsers.ipad_parser import ipad_parser
from parsers.apple_watch_parser import AppleWatchParser
from parsers.imac_parser import iMacParser
from parsers.airpods_parser import AirPodsParser
from parsers.apple_pencil_parser import ApplePencilParser

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≥–∏–±—Ä–∏–¥–Ω—ã–π –ø–∞—Ä—Å–µ—Ä
from services.hybrid_parser import HybridParser

class AppleEcosystemTester:
    """–¢–µ—Å—Ç–µ—Ä –≤—Å–µ–π —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã Apple"""
    
    def __init__(self):
        self.examples_file = Path(__file__).parent / "bot" / "exampleprices.txt"
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä—ã
        self.parsers = {
            'iPhone': iphone_parser,
            'MacBook': macbook_parser,
            'iPad': ipad_parser,
            'Apple Watch': AppleWatchParser(),
            'iMac': iMacParser(),
            'AirPods': AirPodsParser(),
            'Apple Pencil': ApplePencilParser()
        }
        
        self.hybrid_parser = HybridParser()
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        self.categories = {
            'iPhone': [],
            'MacBook': [],
            'iPad': [],
            'Apple Watch': [],
            'iMac': [],
            'AirPods': [],
            'Apple Pencil': []
        }
    
    def extract_apple_prices(self) -> Dict[str, List[str]]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ Apple –ø—Ä–∞–π—Å—ã –∏–∑ —Ñ–∞–π–ª–∞ –ø—Ä–∏–º–µ—Ä–æ–≤"""
        if not self.examples_file.exists():
            print(f"‚ùå –§–∞–π–ª –ø—Ä–∏–º–µ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.examples_file}")
            return {}
        
        print(f"üìÇ –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª: {self.examples_file}")
        
        with open(self.examples_file, 'r', encoding='utf-8') as f:
            lines = f.readlines()
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        patterns = {
            'iPhone': [
                r'\b(iPhone\s+)?\d{1,2}[A-Z]?\s+(Pro\s+Max|Pro|Plus)?\s*\d+\s*(GB|TB)?\s+[A-Za-z\s]+.*\d+.*[üá∫üá∏üáØüáµüáÆüá≥üá®üá≥üá¶üá™üá≠üá∞üá∞üá∑üá™üá∫üá∑üá∫üá®üá¶üáªüá≥üá¶üá∫üá∏üá¨üáÆüá™üá≤üá¥üá∞üá∑üá¨üáπüáπüá≠üáµüáæüá®üá±]',
                r'\b\d{1,2}[A-Z]?\s+(Pro\s+Max|Pro|Plus)?\s*\d+.*[üá∫üá∏üáØüáµüáÆüá≥üá®üá≥üá¶üá™üá≠üá∞üá∞üá∑üá™üá∫üá∑üá∫üá®üá¶üáªüá≥üá¶üá∫üá∏üá¨üáÆüá™üá≤üá¥üá∞üá∑üá¨üáπüáπüá≠üáµüáæüá®üá±]',
                r'Apple iPhone \d+.*\d+.*[üá∫üá∏üáØüáµüáÆüá≥üá®üá≥üá¶üá™üá≠üá∞üá∞üá∑üá™üá∫üá∑üá∫üá®üá¶üáªüá≥üá¶üá∫üá∏üá¨üáÆüá™üá≤üá¥üá∞üá∑üá¨üáπüáπüá≠üáµüáæüá®üá±]'
            ],
            'MacBook': [
                r'MacBook.*[üá∫üá∏üáØüáµüáÆüá≥üá®üá≥üá¶üá™üá≠üá∞üá∞üá∑üá™üá∫üá∑üá∫üá®üá¶üáªüá≥]',
                r'üíª.*MacBook.*\d+',
                r'Mac Mini.*\d+',
                r'üíª.*Air.*\d+',
                r'üíª.*Pro.*\d+'
            ],
            'iPad': [
                r'iPad.*[üá∫üá∏üáØüáµüáÆüá≥üá®üá≥üá¶üá™üá≠üá∞üá∞üá∑üá™üá∫üá∑üá∫üá®üá¶üáªüá≥]',
                r'MINI.*\d+.*[üá∫üá∏üáØüáµüáÆüá≥üá®üá≥üá¶üá™üá≠üá∞üá∞üá∑üá™üá∫üá∑üá∫üá®üá¶üáªüá≥]',
                r'AIR.*\d+.*[üá∫üá∏üáØüáµüáÆüá≥üá®üá≥üá¶üá™üá≠üá∞üá∞üá∑üá™üá∫üá∑üá∫üá®üá¶üáªüá≥]'
            ],
            'Apple Watch': [
                r'Apple Watch.*\d+',
                r'SE.*\d+.*mm.*\d+',
                r'Ultra.*\d+.*mm.*\d+',
                r'S\d+.*\d+.*mm.*\d+',
                r'AW.*\d+.*mm.*\d+',
                r'Watch.*\d+.*mm.*\d+'
            ],
            'iMac': [
                r'iMac.*[üá∫üá∏üáØüáµüáÆüá≥üá®üá≥üá¶üá™üá≠üá∞üá∞üá∑üá™üá∫üá∑üá∫üá®üá¶üáªüá≥]',
                r'Mac Mini.*\d+',
                r'üíª.*Mini.*\d+'
            ],
            'AirPods': [
                r'AirPods.*\d+',
                r'üéß.*AirPods.*\d+',
                r'üéß.*\d+.*[üá∫üá∏üáØüáµüáÆüá≥üá®üá≥üá¶üá™üá≠üá∞üá∞üá∑üá™üá∫üá∑üá∫üá®üá¶üáªüá≥]'
            ],
            'Apple Pencil': [
                r'Apple Pencil.*\d+',
                r'Pencil.*\d+',
                r'‚úíÔ∏è.*Pencil.*\d+'
            ]
        }
        
        print("üîç –ò–∑–≤–ª–µ–∫–∞–µ–º Apple –ø—Ä–∞–π—Å—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º...")
        
        for line_num, line in enumerate(lines, 1):
            line = line.strip()
            if not line or line.startswith('Top Re:sale') or 'üçé' in line:
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            for category, category_patterns in patterns.items():
                for pattern in category_patterns:
                    if re.search(pattern, line, re.IGNORECASE):
                        self.categories[category].append(line)
                        break
        
        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –ø—Ä–∞–π—Å–æ–≤:")
        total = 0
        for category, items in self.categories.items():
            count = len(items)
            total += count
            print(f"  {category}: {count} —Å—Ç—Ä–æ–∫")
        
        print(f"\nüéØ –í—Å–µ–≥–æ Apple –ø—Ä–∞–π—Å–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {total}")
        return self.categories
    
    def test_individual_parsers(self) -> Dict[str, Tuple[int, int]]:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–∞–∂–¥—ã–π –ø–∞—Ä—Å–µ—Ä –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ"""
        print("\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–î–ò–í–ò–î–£–ê–õ–¨–ù–´–• –ü–ê–†–°–ï–†–û–í")
        print("=" * 60)
        
        results = {}
        
        for category, lines in self.categories.items():
            if not lines:
                continue
            
            print(f"\nüì± –¢–µ—Å—Ç–∏—Ä—É–µ–º {category} –ø–∞—Ä—Å–µ—Ä:")
            print(f"   –°—Ç—Ä–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {len(lines)}")
            
            parser = self.parsers[category]
            
            try:
                if hasattr(parser, 'parse_lines'):
                    # –ù–æ–≤—ã–µ –ø–∞—Ä—Å–µ—Ä—ã
                    parsed_items, unparsed_lines = parser.parse_lines(lines)
                    parsed_count = len(parsed_items)
                    unparsed_count = len(unparsed_lines)
                else:
                    # –°—Ç–∞—Ä—ã–µ –ø–∞—Ä—Å–µ—Ä—ã (iPhone, MacBook, iPad)
                    parsed_count = 0
                    unparsed_count = 0
                    for line in lines:
                        try:
                            result = parser.parse_line(line)
                            if result:
                                parsed_count += 1
                            else:
                                unparsed_count += 1
                        except:
                            unparsed_count += 1
                
                success_rate = (parsed_count / len(lines)) * 100 if lines else 0
                
                print(f"   ‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {parsed_count}")
                print(f"   ‚ùå –ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {unparsed_count}")
                print(f"   üìä –¢–æ—á–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
                
                if unparsed_count > 0 and unparsed_count <= 5:
                    print(f"   üîç –ù–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏:")
                    if hasattr(parser, 'parse_lines'):
                        for line in unparsed_lines[:5]:
                            print(f"      ‚ùå {line}")
                    
                results[category] = (parsed_count, unparsed_count)
                
            except Exception as e:
                print(f"   üí• –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
                results[category] = (0, len(lines))
        
        return results
    
    async def test_hybrid_parser(self) -> Dict[str, int]:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–∏–±—Ä–∏–¥–Ω—ã–π –ø–∞—Ä—Å–µ—Ä"""
        print("\nüîÑ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ì–ò–ë–†–ò–î–ù–û–ì–û –ü–ê–†–°–ï–†–ê")
        print("=" * 60)
        
        results = {}
        
        for category, lines in self.categories.items():
            if not lines:
                continue
            
            print(f"\nüì± –¢–µ—Å—Ç–∏—Ä—É–µ–º {category} —á–µ—Ä–µ–∑ –≥–∏–±—Ä–∏–¥–Ω—ã–π –ø–∞—Ä—Å–µ—Ä:")
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
            test_message = "\n".join(lines)
            
            try:
                result = await self.hybrid_parser.parse_message(test_message, f"test_{category.lower().replace(' ', '_')}")
                
                total_saved = result.get('total_saved', 0)
                template_saved = result.get('template_saved', 0)
                gpt_saved = result.get('gpt_saved', 0)
                
                print(f"   üìä –í—Å–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {total_saved}")
                print(f"   üéØ –®–∞–±–ª–æ–Ω–∞–º–∏: {template_saved}")
                print(f"   ü§ñ GPT: {gpt_saved}")
                
                success_rate = (total_saved / len(lines)) * 100 if lines else 0
                print(f"   üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
                
                results[category] = {
                    'total': len(lines),
                    'saved': total_saved,
                    'template': template_saved,
                    'gpt': gpt_saved,
                    'success_rate': success_rate
                }
                
            except Exception as e:
                print(f"   üí• –û—à–∏–±–∫–∞: {e}")
                results[category] = {
                    'total': len(lines),
                    'saved': 0,
                    'template': 0,
                    'gpt': 0,
                    'success_rate': 0
                }
        
        return results
    
    def generate_report(self, parser_results: Dict[str, Tuple[int, int]], hybrid_results: Dict[str, Dict]) -> None:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç"""
        print("\nüìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
        print("=" * 60)
        
        total_lines = sum(len(lines) for lines in self.categories.values())
        total_parsed_individual = sum(parsed for parsed, _ in parser_results.values())
        total_saved_hybrid = sum(result['saved'] for result in hybrid_results.values())
        
        print(f"\nüéØ –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   –í—Å–µ–≥–æ Apple –ø—Ä–∞–π—Å–æ–≤: {total_lines}")
        print(f"   –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º–∏ –ø–∞—Ä—Å–µ—Ä–∞–º–∏: {total_parsed_individual}")
        print(f"   –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≥–∏–±—Ä–∏–¥–Ω—ã–º –ø–∞—Ä—Å–µ—Ä–æ–º: {total_saved_hybrid}")
        
        overall_individual = (total_parsed_individual / total_lines) * 100 if total_lines else 0
        overall_hybrid = (total_saved_hybrid / total_lines) * 100 if total_lines else 0
        
        print(f"   –¢–æ—á–Ω–æ—Å—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –ø–∞—Ä—Å–µ—Ä–æ–≤: {overall_individual:.1f}%")
        print(f"   –¢–æ—á–Ω–æ—Å—Ç—å –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞: {overall_hybrid:.1f}%")
        
        print(f"\nüìä –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–Ø –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú:")
        for category in self.categories.keys():
            if category not in parser_results:
                continue
                
            lines_count = len(self.categories[category])
            parsed_individual, unparsed_individual = parser_results[category]
            hybrid_data = hybrid_results.get(category, {})
            
            print(f"\n   {category}:")
            print(f"     –°—Ç—Ä–æ–∫: {lines_count}")
            print(f"     –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä: {parsed_individual}/{lines_count} ({(parsed_individual/lines_count)*100:.1f}%)")
            if hybrid_data:
                template_count = hybrid_data['template']
                gpt_count = hybrid_data['gpt']
                total_hybrid = hybrid_data['saved']
                print(f"     –ì–∏–±—Ä–∏–¥–Ω—ã–π –ø–∞—Ä—Å–µ—Ä: {total_hybrid}/{lines_count} ({hybrid_data['success_rate']:.1f}%)")
                print(f"       ‚îî‚îÄ‚îÄ –®–∞–±–ª–æ–Ω–∞–º–∏: {template_count}")
                print(f"       ‚îî‚îÄ‚îÄ GPT: {gpt_count}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª—å "–≤—Å–µ –Ω–∞ —à–∞–±–ª–æ–Ω–∞—Ö"
        total_template = sum(result['template'] for result in hybrid_results.values())
        total_gpt = sum(result['gpt'] for result in hybrid_results.values())
        
        print(f"\nüéØ –¶–ï–õ–¨ '–í–°–ï –ù–ê –®–ê–ë–õ–û–ù–ê–•':")
        print(f"   –®–∞–±–ª–æ–Ω–∞–º–∏: {total_template}")
        print(f"   GPT: {total_gpt}")
        
        if total_gpt == 0:
            print("   üéâ –¶–ï–õ–¨ –î–û–°–¢–ò–ì–ù–£–¢–ê! –í—Å–µ —Ç–æ–≤–∞—Ä—ã —Ä–∞—Å–ø–æ–∑–Ω–∞—é—Ç—Å—è —à–∞–±–ª–æ–Ω–∞–º–∏!")
        else:
            print(f"   ‚ö†Ô∏è  –ï—â–µ {total_gpt} —Ç–æ–≤–∞—Ä–æ–≤ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ GPT")
    
    async def run_full_test(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã"""
        print("üçé –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï APPLE –≠–ö–û–°–ò–°–¢–ï–ú–´")
        print("=" * 60)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–∞–π—Å—ã
        categories = self.extract_apple_prices()
        
        if not any(categories.values()):
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ Apple –ø—Ä–∞–π—Å–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!")
            return
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –ø–∞—Ä—Å–µ—Ä—ã
        parser_results = self.test_individual_parsers()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–∏–±—Ä–∏–¥–Ω—ã–π –ø–∞—Ä—Å–µ—Ä
        hybrid_results = await self.test_hybrid_parser()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        self.generate_report(parser_results, hybrid_results)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = AppleEcosystemTester()
    await tester.run_full_test()

if __name__ == "__main__":
    asyncio.run(main())
