#!/usr/bin/env python3
"""
–ü–æ—à–∞–≥–æ–≤—ã–π —Ç–µ—Å—Ç Apple —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–∞–∂–¥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
"""

import sys
import re
import asyncio
from pathlib import Path
from typing import List, Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(str(Path(__file__).parent))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä—ã
from parsers.iphone_parser import iphone_parser
from parsers.macbook_parser import macbook_parser
from parsers.ipad_parser import iPadParser
from parsers.apple_watch_parser import AppleWatchParser
from parsers.imac_parser import iMacParser
from parsers.airpods_parser import AirPodsParser
from parsers.apple_pencil_parser import ApplePencilParser

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≥–∏–±—Ä–∏–¥–Ω—ã–π –ø–∞—Ä—Å–µ—Ä
from services.hybrid_parser import HybridParser

class AppleStepByStepTester:
    """–ü–æ—à–∞–≥–æ–≤—ã–π —Ç–µ—Å—Ç–µ—Ä Apple —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
    
    def __init__(self):
        self.examples_file = Path(__file__).parent / "bot" / "exampleprices.txt"
        self.hybrid_parser = HybridParser()
    
    def extract_lines_from_file(self) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞ –ø—Ä–∏–º–µ—Ä–æ–≤"""
        if not self.examples_file.exists():
            print(f"‚ùå –§–∞–π–ª –ø—Ä–∏–º–µ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.examples_file}")
            return []
        
        with open(self.examples_file, 'r', encoding='utf-8') as f:
            lines = f.readlines()
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏
        filtered_lines = []
        for line in lines:
            line = line.strip()
            if not line or line.startswith('Top Re:sale') or 'üçé' in line or line.startswith('‚Äî'):
                continue
            if any(char in line for char in ['üî•', 'üíªüíª', '‚ö´Ô∏è', '‚ûñ', 'üî¥', 'üü•', 'üîó', 'üöó', 'üèéÔ∏è']):
                continue
            filtered_lines.append(line)
        
        return filtered_lines
    
    def extract_iphone_lines(self, lines: List[str]) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏ —Å iPhone"""
        iphone_patterns = [
            r'\b\d{1,2}[A-Z]?\s+(Pro\s+Max|Pro\s+Ma—Ö|Pro|Plus)?\s*\d+\s*(GB|TB)?\s+[A-Za-z\s]+.*\d+.*[üá∫üá∏üáØüáµüáÆüá≥üá®üá≥üá¶üá™üá≠üá∞üá∞üá∑üá™üá∫üá∑üá∫üá®üá¶üáªüá≥üá¶üá∫üá∏üá¨üáÆüá™üá≤üá¥üá∞üá∑üá¨üáπüáπüá≠üáµüáæüá®üá±]',
            r'iPhone\s+\d{1,2}[A-Z]?\s+(Pro\s+Max|Pro|Plus)?\s*\d+.*[üá∫üá∏üáØüáµüáÆüá≥üá®üá≥üá¶üá™üá≠üá∞üá∞üá∑üá™üá∫üá∑üá∫üá®üá¶üáªüá≥üá¶üá∫üá∏üá¨üáÆüá™üá≤üá¥üá∞üá∑üá¨üáπüáπüá≠üáµüáæüá®üá±]',
            r'Apple iPhone \d+.*\d+.*[üá∫üá∏üáØüáµüáÆüá≥üá®üá≥üá¶üá™üá≠üá∞üá∞üá∑üá™üá∫üá∑üá∫üá®üá¶üáªüá≥üá¶üá∫üá∏üá¨üáÆüá™üá≤üá¥üá∞üá∑üá¨üáπüáπüá≠üáµüáæüá®üá±]'
        ]
        
        iphone_lines = []
        for line in lines:
            for pattern in iphone_patterns:
                if re.search(pattern, line, re.IGNORECASE):
                    iphone_lines.append(line)
                    break
        
        return iphone_lines
    
    def extract_ipad_lines(self, lines: List[str]) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏ —Å iPad"""
        ipad_patterns = [
            r'iPad.*\d+.*[üá∫üá∏üáØüáµüáÆüá≥üá®üá≥üá¶üá™üá≠üá∞üá∞üá∑üá™üá∫üá∑üá∫üá®üá¶üáªüá≥]',
            r'MINI.*\d+.*[üá∫üá∏üáØüáµüáÆüá≥üá®üá≥üá¶üá™üá≠üá∞üá∞üá∑üá™üá∫üá∑üá∫üá®üá¶üáªüá≥]',
            r'AIR.*\d+.*[üá∫üá∏üáØüáµüáÆüá≥üá®üá≥üá¶üá™üá≠üá∞üá∞üá∑üá™üá∫üá∑üá∫üá®üá¶üáªüá≥]',
            r'Apple iPad.*\d+.*[üá∫üá∏üáØüáµüáÆüá≥üá®üá≥üá¶üá™üá≠üá∞üá∞üá∑üá™üá∫üá∑üá∫üá®üá¶üáªüá≥]'
        ]
        
        ipad_lines = []
        for line in lines:
            for pattern in ipad_patterns:
                if re.search(pattern, line, re.IGNORECASE):
                    ipad_lines.append(line)
                    break
        
        return ipad_lines
    
    def extract_macbook_lines(self, lines: List[str]) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏ —Å MacBook"""
        macbook_patterns = [
            r'MacBook.*[üá∫üá∏üáØüáµüáÆüá≥üá®üá≥üá¶üá™üá≠üá∞üá∞üá∑üá™üá∫üá∑üá∫üá®üá¶üáªüá≥]',
            r'üíª.*MacBook.*\d+',
            r'Mac Mini.*\d+',
            r'üíª.*Air.*\d+',
            r'üíª.*Pro.*\d+',
            r'Apple MacBook.*\d+'
        ]
        
        macbook_lines = []
        for line in lines:
            for pattern in macbook_patterns:
                if re.search(pattern, line, re.IGNORECASE):
                    macbook_lines.append(line)
                    break
        
        return macbook_lines
    
    async def test_iphone_parsing(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ iPhone"""
        print("üçéüì± –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï iPhone –ü–ê–†–°–ò–ù–ì–ê")
        print("=" * 50)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏
        all_lines = self.extract_lines_from_file()
        iphone_lines = self.extract_iphone_lines(all_lines)
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ iPhone —Å—Ç—Ä–æ–∫: {len(iphone_lines)}")
        
        if not iphone_lines:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ iPhone —Å—Ç—Ä–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        print("\nüîç –ü—Ä–∏–º–µ—Ä—ã –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö iPhone —Å—Ç—Ä–æ–∫:")
        for i, line in enumerate(iphone_lines[:10], 1):
            print(f"  {i:2}. {line}")
        
        if len(iphone_lines) > 10:
            print(f"  ... –∏ –µ—â–µ {len(iphone_lines) - 10} —Å—Ç—Ä–æ–∫")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä
        print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º iPhone –ø–∞—Ä—Å–µ—Ä:")
        parsed_count = 0
        failed_lines = []
        
        for line in iphone_lines:
            try:
                result = iphone_parser.parse_line(line)
                if result:
                    parsed_count += 1
                else:
                    failed_lines.append(line)
            except Exception as e:
                failed_lines.append(f"{line} (ERROR: {e})")
        
        success_rate = (parsed_count / len(iphone_lines)) * 100
        print(f"  ‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {parsed_count}/{len(iphone_lines)} ({success_rate:.1f}%)")
        
        if failed_lines:
            print(f"\n‚ùå –ù–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ ({len(failed_lines)}):")
            for line in failed_lines[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5
                print(f"    {line}")
            if len(failed_lines) > 5:
                print(f"    ... –∏ –µ—â–µ {len(failed_lines) - 5}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–∏–±—Ä–∏–¥–Ω—ã–π –ø–∞—Ä—Å–µ—Ä
        print(f"\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ –≥–∏–±—Ä–∏–¥–Ω—ã–π –ø–∞—Ä—Å–µ—Ä:")
        test_message = "\n".join(iphone_lines)
        
        try:
            result = await self.hybrid_parser.parse_message(test_message, "test_iphone")
            
            total_saved = result.get('total_saved', 0)
            template_saved = result.get('template_saved', 0) 
            gpt_saved = result.get('gpt_saved', 0)
            
            print(f"  üìä –í—Å–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {total_saved}")
            print(f"  üéØ –®–∞–±–ª–æ–Ω–∞–º–∏: {template_saved}")
            print(f"  ü§ñ GPT: {gpt_saved}")
            
            hybrid_success = (total_saved / len(iphone_lines)) * 100
            print(f"  üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {hybrid_success:.1f}%")
            
            if gpt_saved > 0:
                print(f"  ‚ö†Ô∏è  {gpt_saved} —Å—Ç—Ä–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —á–µ—Ä–µ–∑ GPT - –Ω—É–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å —à–∞–±–ª–æ–Ω—ã!")
            else:
                print(f"  üéâ –í—Å–µ iPhone —Ä–∞—Å–ø–æ–∑–Ω–∞—é—Ç—Å—è —à–∞–±–ª–æ–Ω–∞–º–∏!")
                
        except Exception as e:
            print(f"  üí• –û—à–∏–±–∫–∞ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞: {e}")
    
    async def test_ipad_parsing(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ iPad"""
        print("\nüçéüì± –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï iPad –ü–ê–†–°–ò–ù–ì–ê")
        print("=" * 50)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏
        all_lines = self.extract_lines_from_file()
        ipad_lines = self.extract_ipad_lines(all_lines)
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ iPad —Å—Ç—Ä–æ–∫: {len(ipad_lines)}")
        
        if not ipad_lines:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ iPad —Å—Ç—Ä–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        print("\nüîç –ü—Ä–∏–º–µ—Ä—ã –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö iPad —Å—Ç—Ä–æ–∫:")
        for i, line in enumerate(ipad_lines[:10], 1):
            print(f"  {i:2}. {line}")
        
        if len(ipad_lines) > 10:
            print(f"  ... –∏ –µ—â–µ {len(ipad_lines) - 10} —Å—Ç—Ä–æ–∫")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä
        print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º iPad –ø–∞—Ä—Å–µ—Ä:")
        parsed_count = 0
        failed_lines = []
        
        for line in ipad_lines:
            try:
                result = ipad_parser.parse_line(line)
                if result:
                    parsed_count += 1
                else:
                    failed_lines.append(line)
            except Exception as e:
                failed_lines.append(f"{line} (ERROR: {e})")
        
        success_rate = (parsed_count / len(ipad_lines)) * 100
        print(f"  ‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {parsed_count}/{len(ipad_lines)} ({success_rate:.1f}%)")
        
        if failed_lines:
            print(f"\n‚ùå –ù–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ ({len(failed_lines)}):")
            for line in failed_lines[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                print(f"    {line}")
            if len(failed_lines) > 10:
                print(f"    ... –∏ –µ—â–µ {len(failed_lines) - 10}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–∏–±—Ä–∏–¥–Ω—ã–π –ø–∞—Ä—Å–µ—Ä
        print(f"\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ –≥–∏–±—Ä–∏–¥–Ω—ã–π –ø–∞—Ä—Å–µ—Ä:")
        test_message = "\n".join(ipad_lines)
        
        try:
            result = await self.hybrid_parser.parse_message(test_message, "test_ipad")
            
            total_saved = result.get('total_saved', 0)
            template_saved = result.get('template_saved', 0)
            gpt_saved = result.get('gpt_saved', 0)
            
            print(f"  üìä –í—Å–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {total_saved}")
            print(f"  üéØ –®–∞–±–ª–æ–Ω–∞–º–∏: {template_saved}")
            print(f"  ü§ñ GPT: {gpt_saved}")
            
            hybrid_success = (total_saved / len(ipad_lines)) * 100
            print(f"  üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {hybrid_success:.1f}%")
            
            if gpt_saved > 0:
                print(f"  ‚ö†Ô∏è  {gpt_saved} —Å—Ç—Ä–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —á–µ—Ä–µ–∑ GPT - –Ω—É–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å —à–∞–±–ª–æ–Ω—ã!")
            else:
                print(f"  üéâ –í—Å–µ iPad —Ä–∞—Å–ø–æ–∑–Ω–∞—é—Ç—Å—è —à–∞–±–ª–æ–Ω–∞–º–∏!")
                
        except Exception as e:
            print(f"  üí• –û—à–∏–±–∫–∞ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞: {e}")
    
    async def test_macbook_parsing(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ MacBook"""
        print("\nüçéüíª –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï MacBook –ü–ê–†–°–ò–ù–ì–ê")
        print("=" * 50)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏
        all_lines = self.extract_lines_from_file()
        macbook_lines = self.extract_macbook_lines(all_lines)
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ MacBook —Å—Ç—Ä–æ–∫: {len(macbook_lines)}")
        
        if not macbook_lines:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ MacBook —Å—Ç—Ä–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        print("\nüîç –ü—Ä–∏–º–µ—Ä—ã –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö MacBook —Å—Ç—Ä–æ–∫:")
        for i, line in enumerate(macbook_lines[:10], 1):
            print(f"  {i:2}. {line}")
        
        if len(macbook_lines) > 10:
            print(f"  ... –∏ –µ—â–µ {len(macbook_lines) - 10} —Å—Ç—Ä–æ–∫")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä
        print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º MacBook –ø–∞—Ä—Å–µ—Ä:")
        parsed_count = 0
        failed_lines = []
        
        for line in macbook_lines:
            try:
                result = macbook_parser.parse_line(line)
                if result:
                    parsed_count += 1
                else:
                    failed_lines.append(line)
            except Exception as e:
                failed_lines.append(f"{line} (ERROR: {e})")
        
        success_rate = (parsed_count / len(macbook_lines)) * 100
        print(f"  ‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {parsed_count}/{len(macbook_lines)} ({success_rate:.1f}%)")
        
        if failed_lines:
            print(f"\n‚ùå –ù–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ ({len(failed_lines)}):")
            for line in failed_lines[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                print(f"    {line}")
            if len(failed_lines) > 10:
                print(f"    ... –∏ –µ—â–µ {len(failed_lines) - 10}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–∏–±—Ä–∏–¥–Ω—ã–π –ø–∞—Ä—Å–µ—Ä
        print(f"\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ –≥–∏–±—Ä–∏–¥–Ω—ã–π –ø–∞—Ä—Å–µ—Ä:")
        test_message = "\n".join(macbook_lines)
        
        try:
            result = await self.hybrid_parser.parse_message(test_message, "test_macbook")
            
            total_saved = result.get('total_saved', 0)
            template_saved = result.get('template_saved', 0)
            gpt_saved = result.get('gpt_saved', 0)
            
            print(f"  üìä –í—Å–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {total_saved}")
            print(f"  üéØ –®–∞–±–ª–æ–Ω–∞–º–∏: {template_saved}")
            print(f"  ü§ñ GPT: {gpt_saved}")
            
            hybrid_success = (total_saved / len(macbook_lines)) * 100
            print(f"  üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {hybrid_success:.1f}%")
            
            if gpt_saved > 0:
                print(f"  ‚ö†Ô∏è  {gpt_saved} —Å—Ç—Ä–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —á–µ—Ä–µ–∑ GPT - –Ω—É–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å —à–∞–±–ª–æ–Ω—ã!")
            else:
                print(f"  üéâ –í—Å–µ MacBook —Ä–∞—Å–ø–æ–∑–Ω–∞—é—Ç—Å—è —à–∞–±–ª–æ–Ω–∞–º–∏!")
                
        except Exception as e:
            print(f"  üí• –û—à–∏–±–∫–∞ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞: {e}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = AppleStepByStepTester()
    
    print("–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å:")
    print("1. iPhone")
    print("2. iPad") 
    print("3. MacBook")
    print("4. –í—Å–µ –ø–æ –æ—á–µ—Ä–µ–¥–∏")
    
    choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-4): ").strip()
    
    if choice == "1":
        await tester.test_iphone_parsing()
    elif choice == "2":
        await tester.test_ipad_parsing()
    elif choice == "3":
        await tester.test_macbook_parsing()
    elif choice == "4":
        await tester.test_iphone_parsing()
        await tester.test_ipad_parsing()
        await tester.test_macbook_parsing()
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")

if __name__ == "__main__":
    asyncio.run(main())
