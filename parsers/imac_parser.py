"""
–ü–∞—Ä—Å–µ—Ä –¥–ª—è iMac
"""
import re
import logging
from typing import List, Dict, Any, Tuple
from dataclasses import dataclass

logger = logging.getLogger(__name__)

@dataclass
class iMacData:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ü–µ–Ω—ã iMac"""
    model: str  # iMac, Mac Mini
    chip: str   # M1, M2, M3, M4
    size: str   # 24, Mini
    memory: str # 8GB, 16GB, 24GB
    storage: str # 256GB, 512GB, 1TB
    color: str  # Blue, Silver, etc.
    country_flag: str  # üá∫üá∏, üáØüáµ, etc.
    price: int
    product_code: str = ""
    source_line: str = ""

    def to_dict(self) -> Dict[str, Any]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"""
        return {
            'firm': 'Apple',
            'device': self.model,
            'generation': f"{self.chip}",
            'variant': self.size,
            'memory': self.memory,
            'storage': self.storage,
            'color': self.color,
            'configuration': f"{self.memory} {self.storage} {self.color}",
            'product_code': self.product_code,
            'country': self.country_flag,
            'price': self.price
        }

class iMacParser:
    """–ü–∞—Ä—Å–µ—Ä –¥–ª—è iMac"""
    
    def __init__(self):
        self.patterns = [
            # üíª[MWUF3] iMac M4 (8/8/16/256) Blueüá∫üá∏ ‚Äî 131500
            r'üíª\[([A-Z0-9]+)\]\s+iMac\s+M(\d+)\s*\((\d+)/(\d+)/(\d+)/(\d+)\)\s+(\w+)([üá∫üá∏üáØüáµüáÆüá≥üá®üá≥üá¶üá™üá≠üá∞üá∞üá∑üá™üá∫üá∑üá∫üá®üá¶üáªüá≥]+)\s*‚Äî\s*(\d+[.,]\d+|\d+)',
            
            # Mac Mini M2 Pro MNH73 - 70000üá∫üá∏
            r'Mac\s+Mini\s+M(\d+)\s+Pro\s+([A-Z0-9]+)\s*-\s*(\d+[.,]\d+|\d+)([üá∫üá∏üáØüáµüáÆüá≥üá®üá≥üá¶üá™üá≠üá∞üá∞üá∑üá™üá∫üá∑üá∫üá®üá¶üáªüá≥]+)',
            
            # Mac Mini (MU9D3) M4/16/256 Silver üá®üá≥ 48500
            r'Mac\s+Mini\s*\(([A-Z0-9]+)\)\s+M(\d+)/(\d+)/(\d+)\s+(\w+)\s+([üá∫üá∏üáØüáµüáÆüá≥üá®üá≥üá¶üá™üá≠üá∞üá∞üá∑üá™üá∫üá∑üá∫üá®üá¶üáªüá≥]+)\s+(\d+[.,]\d+|\d+)',
            
            # M2 8/256GB - 30000
            r'M(\d+)\s+(\d+)/(\d+(?:GB|TB)?)\s*-\s*(\d+[.,]\d+|\d+)',
        ]
        
        # –¶–≤–µ—Ç–∞ iMac
        self.colors = {
            'blue': 'Blue',
            'silver': 'Silver',
            'green': 'Green',
            'pink': 'Pink',
            'yellow': 'Yellow',
            'orange': 'Orange',
            'purple': 'Purple'
        }

    def parse_lines(self, lines: List[str]) -> Tuple[List[iMacData], List[str]]:
        """–ü–∞—Ä—Å–∏—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        parsed_data = []
        unparsed_lines = []
        
        for line in lines:
            try:
                result = self._parse_single_line(line)
                if result:
                    parsed_data.append(result)
                else:
                    unparsed_lines.append(line)
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏ iMac: {line} - {e}")
                unparsed_lines.append(line)
        
        return parsed_data, unparsed_lines

    def _parse_single_line(self, line: str) -> iMacData:
        """–ü–∞—Ä—Å–∏—Ç –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É iMac"""
        for i, pattern in enumerate(self.patterns):
            match = re.search(pattern, line, re.IGNORECASE)
            if match:
                groups = match.groups()
                logger.info(f"iMac –ø–∞—Ç—Ç–µ—Ä–Ω {i} —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è —Å—Ç—Ä–æ–∫–∏: {line}, –≥—Ä—É–ø–ø: {len(groups)}")
                
                try:
                    if i == 0:  # üíª[MWUF3] iMac M4 (8/8/16/256) Blueüá∫üá∏ ‚Äî 131500
                        product_code, chip, cpu_cores, gpu_cores, memory, storage, color, country, price = groups
                        model = 'iMac'
                        size = '24'  # iMac –≤—Å–µ–≥–¥–∞ 24 –¥—é–π–º–∞
                        
                    elif i == 1:  # Mac Mini M2 Pro MNH73 - 70000üá∫üá∏
                        chip, product_code, price, country = groups
                        model = 'Mac Mini'
                        size = 'Mini'
                        memory = '16'  # Pro –≤–µ—Ä—Å–∏—è –æ–±—ã—á–Ω–æ 16GB
                        storage = '512'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                        color = 'Silver'
                        
                    elif i == 2:  # Mac Mini (MU9D3) M4/16/256 Silver üá®üá≥ 48500
                        product_code, chip, memory, storage, color, country, price = groups
                        model = 'Mac Mini'
                        size = 'Mini'
                        
                    elif i == 3:  # M2 8/256GB - 30000
                        chip, memory, storage, price = groups
                        model = 'Mac Mini'
                        size = 'Mini'
                        color = 'Silver'
                        country = ''
                        product_code = ''
                    
                    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
                    color = self._normalize_color(color)
                    storage = self._normalize_storage(storage)
                    memory = f"{memory}GB"
                    price = int(price.replace('.', '').replace(',', ''))
                    
                    return iMacData(
                        model=model,
                        chip=f"M{chip}",
                        size=size,
                        memory=memory,
                        storage=storage,
                        color=color,
                        country_flag=country,
                        price=price,
                        product_code=product_code,
                        source_line=line
                    )
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ iMac –≥—Ä—É–ø–ø—ã {i}: {e}")
                    continue
        
        return None

    def _normalize_color(self, color: str) -> str:
        """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Ü–≤–µ—Ç"""
        color_lower = color.lower().strip()
        return self.colors.get(color_lower, color.title())

    def _normalize_storage(self, storage: str) -> str:
        """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –æ–±—ä–µ–º –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—è"""
        storage = storage.strip()
        if not storage.endswith(('GB', 'TB')):
            if int(storage) >= 1000:
                storage = f"{int(storage)//1000}TB"
            else:
                storage = f"{storage}GB"
        return storage

    def _is_imac_line(self, line: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –æ–ø–∏—Å–∞–Ω–∏–µ–º iMac"""
        line_lower = line.lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        has_imac = 'imac' in line_lower or 'mac mini' in line_lower
        has_chip = bool(re.search(r'm[1-4]', line_lower))
        has_price = bool(re.search(r'\d{4,6}|\d+[.,]\d+', line))
        
        return has_imac and (has_chip or has_price)
