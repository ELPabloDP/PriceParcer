"""
–ü–∞—Ä—Å–µ—Ä –¥–ª—è Apple Pencil
"""
import re
import logging
from typing import List, Dict, Any, Tuple
from dataclasses import dataclass

logger = logging.getLogger(__name__)

@dataclass
class ApplePencilData:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ü–µ–Ω—ã Apple Pencil"""
    model: str  # Apple Pencil, Pencil
    generation: str  # 1, 2, Pro, USB-C
    connector: str  # Lightning, USB-C, TYPE-C
    country_flag: str  # üá∫üá∏, üáØüáµ, etc.
    price: int
    product_code: str = ""
    source_line: str = ""

    def to_dict(self) -> Dict[str, Any]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"""
        return {
            'firm': 'Apple',
            'device': 'Apple Pencil',
            'generation': self.generation,
            'variant': self.model,
            'connector': self.connector,
            'configuration': f"{self.generation} {self.connector}".strip(),
            'product_code': self.product_code,
            'country': self.country_flag,
            'price': self.price
        }

class ApplePencilParser:
    """–ü–∞—Ä—Å–µ—Ä –¥–ª—è Apple Pencil"""
    
    def __init__(self):
        self.patterns = [
            # Pencil 2 - 7000
            r'Pencil\s+(\d+|Pro|USB\s*C)\s*-\s*(\d+[.,]\d+|\d+)([üá∫üá∏üáØüáµüáÆüá≥üá®üá≥üá¶üá™üá≠üá∞üá∞üá∑üá™üá∫üá∑üá∫üá®üá¶üáªüá≥]*)',
            
            # ‚úíÔ∏èPencil 2 - 7500üá∫üá∏
            r'‚úíÔ∏èPencil\s+(\d+|Pro|USB\s*C)\s*-\s*(\d+[.,]\d+|\d+)([üá∫üá∏üáØüáµüáÆüá≥üá®üá≥üá¶üá™üá≠üá∞üá∞üá∑üá™üá∫üá∑üá∫üá®üá¶üáªüá≥]+)',
            
            # Apple Pencil 1 üá™üá∫ 6000
            r'Apple\s+Pencil\s+(\d+|Pro|TYPE-C|USB-C)\s+([üá∫üá∏üáØüáµüáÆüá≥üá®üá≥üá¶üá™üá≠üá∞üá∞üá∑üá™üá∫üá∑üá∫üá®üá¶üáªüá≥]+)\s+(\d+[.,]\d+|\d+)',
            
            # Apple Pencil TYPE-C üá™üá∫ 7000
            r'Apple\s+Pencil\s+(TYPE-C|USB-C)\s+([üá∫üá∏üáØüáµüáÆüá≥üá®üá≥üá¶üá™üá≠üá∞üá∞üá∑üá™üá∫üá∑üá∫üá®üá¶üáªüá≥]+)\s+(\d+[.,]\d+|\d+)',
        ]

    def parse_lines(self, lines: List[str]) -> Tuple[List[ApplePencilData], List[str]]:
        """–ü–∞—Ä—Å–∏—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        parsed_data = []
        unparsed_lines = []
        
        for line in lines:
            try:
                result = self._parse_single_line(line)
                if result:
                    parsed_data.append(result)
                else:
                    unparsed_lines.append(line)
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏ Apple Pencil: {line} - {e}")
                unparsed_lines.append(line)
        
        return parsed_data, unparsed_lines

    def _parse_single_line(self, line: str) -> ApplePencilData:
        """–ü–∞—Ä—Å–∏—Ç –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É Apple Pencil"""
        for i, pattern in enumerate(self.patterns):
            match = re.search(pattern, line, re.IGNORECASE)
            if match:
                groups = match.groups()
                logger.info(f"Apple Pencil –ø–∞—Ç—Ç–µ—Ä–Ω {i} —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è —Å—Ç—Ä–æ–∫–∏: {line}, –≥—Ä—É–ø–ø: {len(groups)}")
                
                try:
                    if i == 0:  # Pencil 2 - 7000
                        generation, price, country = groups
                        model = 'Apple Pencil'
                        connector = self._get_connector_by_generation(generation)
                        
                    elif i == 1:  # ‚úíÔ∏èPencil 2 - 7500üá∫üá∏
                        generation, price, country = groups
                        model = 'Apple Pencil'
                        connector = self._get_connector_by_generation(generation)
                        
                    elif i == 2:  # Apple Pencil 1 üá™üá∫ 6000
                        generation, country, price = groups
                        model = 'Apple Pencil'
                        connector = self._get_connector_by_generation(generation)
                        
                    elif i == 3:  # Apple Pencil TYPE-C üá™üá∫ 7000
                        connector, country, price = groups
                        model = 'Apple Pencil'
                        generation = self._get_generation_by_connector(connector)
                    
                    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
                    generation = self._normalize_generation(generation)
                    connector = self._normalize_connector(connector)
                    price = int(price.replace('.', '').replace(',', ''))
                    
                    return ApplePencilData(
                        model=model,
                        generation=generation,
                        connector=connector,
                        country_flag=country,
                        price=price,
                        source_line=line
                    )
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Apple Pencil –≥—Ä—É–ø–ø—ã {i}: {e}")
                    continue
        
        return None

    def _get_connector_by_generation(self, generation: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–∞–∑—ä–µ–º –ø–æ –ø–æ–∫–æ–ª–µ–Ω–∏—é"""
        gen_lower = generation.lower().replace(' ', '')
        if gen_lower == '1':
            return 'Lightning'
        elif gen_lower == '2':
            return 'Lightning'
        elif gen_lower == 'pro':
            return 'USB-C'
        elif 'usb' in gen_lower or 'type' in gen_lower:
            return 'USB-C'
        return 'Lightning'

    def _get_generation_by_connector(self, connector: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–∫–æ–ª–µ–Ω–∏–µ –ø–æ —Ä–∞–∑—ä–µ–º—É"""
        conn_lower = connector.lower().replace('-', '').replace(' ', '')
        if 'usbc' in conn_lower or 'typec' in conn_lower:
            return 'USB-C'
        return '2'

    def _normalize_generation(self, generation: str) -> str:
        """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –ø–æ–∫–æ–ª–µ–Ω–∏–µ"""
        gen_lower = generation.lower().replace(' ', '')
        if gen_lower == 'usb—Å' or gen_lower == 'usbc' or gen_lower == 'type-c':
            return 'USB-C'
        return generation

    def _normalize_connector(self, connector: str) -> str:
        """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Ä–∞–∑—ä–µ–º"""
        conn_lower = connector.lower().replace(' ', '').replace('-', '')
        if 'usbc' in conn_lower or 'typec' in conn_lower:
            return 'USB-C'
        return connector

    def _is_apple_pencil_line(self, line: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –æ–ø–∏—Å–∞–Ω–∏–µ–º Apple Pencil"""
        line_lower = line.lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        has_pencil = 'pencil' in line_lower and 'vacuum' not in line_lower  # –∏—Å–∫–ª—é—á–∞–µ–º –ø—ã–ª–µ—Å–æ—Å
        has_price = bool(re.search(r'\d{4,6}|\d+[.,]\d+', line))
        
        return has_pencil and has_price
