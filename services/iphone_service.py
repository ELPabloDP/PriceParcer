"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å iPhone –¥–∞–Ω–Ω—ã–º–∏
"""
import logging
from typing import List, Dict, Any, Optional
from decimal import Decimal
import os
import django
from django.conf import settings
from asgiref.sync import sync_to_async

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'db_app.settings')
django.setup()

from db_app.iphone_models import (
    IPhoneGeneration, IPhoneVariant, IPhoneStorage, 
    IPhoneColor, IPhoneCountry, IPhonePrice, IPhoneBestPrice
)
from parsers.iphone_parser import IPhonePriceData, iphone_parser

logger = logging.getLogger(__name__)

class IPhoneService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å iPhone"""
    
    def __init__(self):
        pass  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    
    @sync_to_async
    def _init_default_data(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        # –ü–æ–∫–æ–ª–µ–Ω–∏—è
        generations = [
            ('11', 'iPhone 11'),
            ('12', 'iPhone 12'), 
            ('13', 'iPhone 13'),
            ('14', 'iPhone 14'),
            ('15', 'iPhone 15'),
            ('16', 'iPhone 16'),
            ('16E', 'iPhone 16E'),
        ]
        for number, display_name in generations:
            IPhoneGeneration.objects.get_or_create(
                number=number,
                defaults={'display_name': display_name}
            )
        
        # –í–∞—Ä–∏–∞–Ω—Ç—ã
        variants = [
            ('', 'iPhone', 0),
            ('Plus', 'iPhone Plus', 1),
            ('Pro', 'iPhone Pro', 2), 
            ('Pro Max', 'iPhone Pro Max', 3),
        ]
        for name, display_name, sort_order in variants:
            IPhoneVariant.objects.get_or_create(
                name=name,
                defaults={'display_name': display_name, 'sort_order': sort_order}
            )
        
        # –û–±—ä–µ–º—ã –ø–∞–º—è—Ç–∏
        storages = [
            ('64GB', 64),
            ('128GB', 128),
            ('256GB', 256),
            ('512GB', 512),
            ('1TB', 1024),
        ]
        for capacity, size_gb in storages:
            IPhoneStorage.objects.get_or_create(
                capacity=capacity,
                defaults={'size_gb': size_gb}
            )
        
        # –ë–∞–∑–æ–≤—ã–µ —Ü–≤–µ—Ç–∞
        colors = [
            ('Black', '–ß–µ—Ä–Ω—ã–π'),
            ('White', '–ë–µ–ª—ã–π'),
            ('Blue', '–°–∏–Ω–∏–π'),
            ('Green', '–ó–µ–ª–µ–Ω—ã–π'),
            ('Red', '–ö—Ä–∞—Å–Ω—ã–π'),
            ('Pink', '–†–æ–∑–æ–≤—ã–π'),
            ('Purple', '–§–∏–æ–ª–µ—Ç–æ–≤—ã–π'),
            ('Yellow', '–ñ–µ–ª—Ç—ã–π'),
            ('Midnight', '–¢–µ–º–Ω–∞—è –Ω–æ—á—å'),
            ('Starlight', '–°–∏—è—é—â–∞—è –∑–≤–µ–∑–¥–∞'),
            ('Natural', '–ù–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π'),
            ('Desert', '–ü—É—Å—Ç—ã–Ω—è'),
            ('Ultramarine', '–£–ª—å—Ç—Ä–∞–º–∞—Ä–∏–Ω'),
            ('Teal', '–ë–∏—Ä—é–∑–æ–≤—ã–π'),
            ('Titanium', '–¢–∏—Ç–∞–Ω'),
        ]
        for name, display_name in colors:
            IPhoneColor.objects.get_or_create(
                name=name,
                defaults={'display_name': display_name}
            )
        
        # –°—Ç—Ä–∞–Ω—ã
        countries = [
            ('üá∫üá∏', '–°–®–ê', ''),
            ('üáØüáµ', '–Ø–ø–æ–Ω–∏—è', ''),
            ('üáÆüá≥', '–ò–Ω–¥–∏—è', ''),
            ('üá®üá≥', '–ö–∏—Ç–∞–π', ''),
            ('üá¶üá™', '–û–ê–≠', ''),
            ('üá≠üá∞', '–ì–æ–Ω–∫–æ–Ω–≥', ''),
            ('üá∞üá∑', '–Æ–∂–Ω–∞—è –ö–æ—Ä–µ—è', ''),
            ('üá™üá∫', '–ï–≤—Ä–æ–ø–∞', ''),
            ('üá∑üá∫', '–†–æ—Å—Å–∏—è', ''),
            ('üá®üá¶', '–ö–∞–Ω–∞–¥–∞', ''),
            ('üáªüá≥', '–í—å–µ—Ç–Ω–∞–º', ''),
            ('üá®üá≥', '–ö–∏—Ç–∞–π 2SIM', '2SIM'),
        ]
        for flag, name, code in countries:
            IPhoneCountry.objects.get_or_create(
                flag=flag,
                code=code,
                defaults={'name': name}
            )
    
    async def parse_and_save_prices(self, text: str, source: str = "") -> Dict[str, Any]:
        """–ü–∞—Ä—Å–∏—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ü–µ–Ω—ã iPhone"""
        lines = text.split('\n')
        
        # –ü–∞—Ä—Å–∏–º —Å –ø–æ–º–æ—â—å—é —à–∞–±–ª–æ–Ω–æ–≤
        parsed_data, unparsed_lines = iphone_parser.parse_lines(lines)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        saved_count = 0
        for data in parsed_data:
            try:
                if await self._save_iphone_price(data, source):
                    saved_count += 1
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã iPhone: {e}")
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö –≤ GPT
        gpt_saved = 0
        if unparsed_lines:
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º {len(unparsed_lines)} –Ω–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫ –≤ GPT")
            # TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å GPT –¥–ª—è –Ω–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
        
        return {
            'template_parsed': len(parsed_data),
            'template_saved': saved_count,
            'gpt_parsed': len(unparsed_lines),
            'gpt_saved': gpt_saved,
            'total_saved': saved_count + gpt_saved,
            'unparsed_lines': unparsed_lines
        }
    
    @sync_to_async
    def _save_iphone_price(self, data: IPhonePriceData, source: str) -> bool:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ü–µ–Ω—É iPhone –≤ –ë–î"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
            generation, _ = IPhoneGeneration.objects.get_or_create(
                number=data.generation,
                defaults={'display_name': f'iPhone {data.generation}'}
            )
            
            variant, _ = IPhoneVariant.objects.get_or_create(
                name=data.variant,
                defaults={
                    'display_name': f'iPhone {data.variant}' if data.variant else 'iPhone',
                    'sort_order': {'': 0, 'Plus': 1, 'Pro': 2, 'Pro Max': 3}.get(data.variant, 99)
                }
            )
            
            storage, _ = IPhoneStorage.objects.get_or_create(
                capacity=data.storage,
                defaults={'size_gb': int(data.storage.replace('GB', '').replace('TB', '')) * (1024 if 'TB' in data.storage else 1)}
            )
            
            color, _ = IPhoneColor.objects.get_or_create(
                name=data.color,
                defaults={'display_name': data.color}
            )
            
            country, _ = IPhoneCountry.objects.get_or_create(
                flag=data.country_flag,
                code=data.country_code,
                defaults={'name': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä–∞–Ω–∞'}
            )
            
            # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É
            price_obj, created = IPhonePrice.objects.update_or_create(
                generation=generation,
                variant=variant,
                storage=storage,
                color=color,
                country=country,
                defaults={
                    'price': Decimal(data.price),
                    'source': source
                }
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ª—É—á—à—É—é —Ü–µ–Ω—É
            self._update_best_price(generation, variant, storage, color)
            
            if created:
                logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Ü–µ–Ω–∞ iPhone: {price_obj}")
            else:
                logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∞ —Ü–µ–Ω–∞ iPhone: {price_obj}")
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è iPhone —Ü–µ–Ω—ã: {e}")
            return False
    
    def _update_best_price(self, generation, variant, storage, color):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ª—É—á—à—É—é —Ü–µ–Ω—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            # –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—É—é –¥–µ—à–µ–≤—É—é —Ü–µ–Ω—É –¥–ª—è —ç—Ç–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            best_price = IPhonePrice.objects.filter(
                generation=generation,
                variant=variant,
                storage=storage,
                color=color
            ).order_by('price').first()
            
            if best_price:
                IPhoneBestPrice.objects.update_or_create(
                    generation=generation,
                    variant=variant,
                    storage=storage,
                    color=color,
                    defaults={'best_price': best_price}
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª—É—á—à–µ–π —Ü–µ–Ω—ã: {e}")
    
    @sync_to_async
    def get_catalog_data(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–∞—Ç–∞–ª–æ–≥–∞ iPhone"""
        try:
            catalog = {}
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è–º
            for generation in IPhoneGeneration.objects.all().order_by('number'):
                generation_data = {}
                
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º
                for variant in IPhoneVariant.objects.all().order_by('sort_order'):
                    best_prices = IPhoneBestPrice.objects.filter(
                        generation=generation,
                        variant=variant
                    ).select_related('best_price', 'storage', 'color').order_by(
                        'storage__size_gb', 'color__name'
                    )
                    
                    if best_prices.exists():
                        variant_data = []
                        for bp in best_prices:
                            variant_data.append({
                                'id': bp.best_price.id,
                                'name': bp.best_price.full_name,
                                'price': int(bp.best_price.price),
                                'display_price': bp.best_price.display_price,
                                'country': bp.best_price.country.flag,
                                'storage': bp.storage.capacity,
                                'color': bp.color.display_name
                            })
                        
                        variant_key = variant.display_name if variant.name else f"iPhone {generation.number}"
                        generation_data[variant_key] = variant_data
                
                if generation_data:
                    catalog[generation.display_name] = generation_data
            
            return catalog
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ iPhone: {e}")
            return {}
    
    @sync_to_async
    def clear_all_data(self) -> int:
        """–û—á–∏—â–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ iPhone"""
        try:
            count = IPhonePrice.objects.count()
            IPhonePrice.objects.all().delete()
            IPhoneBestPrice.objects.all().delete()
            logger.info(f"–û—á–∏—â–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ iPhone: {count} –∑–∞–ø–∏—Å–µ–π")
            return count
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö iPhone: {e}")
            return 0

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
iphone_service = IPhoneService()
