"""
–ì–∏–±—Ä–∏–¥–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: —à–∞–±–ª–æ–Ω—ã + GPT fallback
"""
import logging
from typing import List, Dict, Any, Tuple
import asyncio

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä—Å–µ—Ä—ã
import sys
from pathlib import Path
sys.path.append(str(Path(__file__).parent.parent))

from parsers.iphone_parser import iphone_parser
from parsers.macbook_parser import macbook_parser
from parsers.ipad_parser import ipad_parser
from parsers.apple_watch_parser import AppleWatchParser
from parsers.imac_parser import iMacParser
from parsers.airpods_parser import AirPodsParser
from services.iphone_service_simple import iphone_service_simple
from services.macbook_service_simple import macbook_service_simple
from services.ipad_service_simple import ipad_service_simple
from services.apple_watch_service import AppleWatchService
from services.imac_service import iMacService
from services.airpods_service import AirPodsService
from services.macbook_service import macbook_service

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É GPT –¥–ª—è fallback
from bot.gptapi import yandex_gpt
from bot.database_service_async import db_service

logger = logging.getLogger(__name__)

class HybridParser:
    """–ì–∏–±—Ä–∏–¥–Ω—ã–π –ø–∞—Ä—Å–µ—Ä: —Å–Ω–∞—á–∞–ª–∞ —à–∞–±–ª–æ–Ω—ã, –ø–æ—Ç–æ–º GPT"""
    
    def __init__(self):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –ø–∞—Ä—Å–µ—Ä—ã
        self.apple_watch_parser = AppleWatchParser()
        self.imac_parser = iMacParser()
        self.airpods_parser = AirPodsParser()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã
        self.apple_watch_service = AppleWatchService()
        self.imac_service = iMacService()
        self.airpods_service = AirPodsService()
        
        self.device_parsers = {
            'iphone': {
                'parser': iphone_parser,
                'service': iphone_service_simple,
                'keywords': ['iphone', '16e', '16', '15', '14', '13', 'pro', 'plus', 'max'],
                'priority': 1
            },
            'macbook': {
                'parser': macbook_parser,
                'service': macbook_service_simple,
                'keywords': ['macbook', 'air', 'pro', 'm1 ', 'm2 ', 'm3 ', 'm4 '],
                'priority': 2
            },
            'ipad': {
                'parser': ipad_parser,
                'service': ipad_service_simple,
                'keywords': ['ipad', 'mini', 'air', 'pro', 'wifi', 'lte', 'wi-fi'],
                'priority': 3
            },
            'apple_watch': {
                'parser': self.apple_watch_parser,
                'service': self.apple_watch_service,
                'keywords': ['apple watch', 'aw ', 'watch', 'se', 'ultra', 'series', 's10'],
                'priority': 4
            },
            'imac': {
                'parser': self.imac_parser,
                'service': self.imac_service,
                'keywords': ['imac', 'mac mini', 'mini m2', 'mini m4'],
                'priority': 5
            },
            'airpods': {
                'parser': self.airpods_parser,
                'service': self.airpods_service,
                'keywords': ['airpods', 'üéß', 'max', 'pro', 'anc', 'lightning', 'usb-c'],
                'priority': 6
            }
        }
    
    async def parse_message(self, text: str, source: str = "") -> Dict[str, Any]:
        """
        –ü–∞—Ä—Å–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∞–π—Å–∞–º–∏, –∏—Å–ø–æ–ª—å–∑—É—è –≥–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–¥—Ö–æ–¥
        
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        """
        logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –≥–∏–±—Ä–∏–¥–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏—è ({len(text.split())} —Å–ª–æ–≤)")
        
        results = {
            'template_results': {},
            'gpt_results': {},
            'total_saved': 0,
            'processing_summary': []
        }
        
        # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏
        lines = text.strip().split('\n')
        processed_lines = set()  # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
        
        # –≠—Ç–∞–ø 1: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä—Å–µ—Ä–∞–º–∏ (—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É)
        sorted_parsers = sorted(self.device_parsers.items(), key=lambda x: x[1].get('priority', 999))
        for device_type, parser_info in sorted_parsers:
            logger.info(f"üì± –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {device_type} —à–∞–±–ª–æ–Ω–∞–º–∏...")
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            device_lines = self._filter_lines_for_device(lines, parser_info['keywords'], device_type)
            
            if device_lines:
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(device_lines)} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–æ–∫ –¥–ª—è {device_type}")
                
                # –ü–∞—Ä—Å–∏–º —à–∞–±–ª–æ–Ω–∞–º–∏
                parsed_data, unparsed_lines = parser_info['parser'].parse_lines(device_lines)
                
                if parsed_data:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å
                    if device_type == 'macbook':
                        # –î–ª—è MacBook –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
                        saved_count = 0
                        for data in parsed_data:
                            price_data = data.to_dict()
                            price_data['source'] = source
                            result = await parser_info['service'].save_macbook_price(price_data)
                            if result:
                                saved_count += 1
                        
                        save_result = {
                            'template_saved': saved_count,
                            'total_saved': saved_count
                        }
                    else:
                        # –î–ª—è –¥—Ä—É–≥–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥
                        source_lines = []
                        for data in parsed_data:
                            if isinstance(data, dict):
                                source_lines.append(data.get('source_line', ''))
                            else:
                                source_lines.append(getattr(data, 'source_line', ''))
                        save_result = await parser_info['service'].parse_and_save_prices(
                            '\n'.join(source_lines), 
                            source
                        )
                        # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –µ–¥–∏–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
                        if 'total_saved' not in save_result:
                            save_result['total_saved'] = save_result.get('saved', 0)
                        if 'template_saved' not in save_result:
                            save_result['template_saved'] = save_result.get('saved', 0)
                    
                    results['template_results'][device_type] = save_result
                    results['total_saved'] += save_result['total_saved']
                    
                    # –û—Ç–º–µ—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
                    for data in parsed_data:
                        if isinstance(data, dict):
                            processed_lines.add(data.get('source_line', '').strip())
                        else:
                            processed_lines.add(getattr(data, 'source_line', '').strip())
                    
                    results['processing_summary'].append(
                        f"‚úÖ {device_type}: {save_result['template_saved']} —à–∞–±–ª–æ–Ω–∞–º–∏"
                    )
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ —ç—Ç–æ–≥–æ —Ç–∏–ø–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ GPT —Å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
                if unparsed_lines:
                    logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º {len(unparsed_lines)} –Ω–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö {device_type} —Å—Ç—Ä–æ–∫ –≤ GPT")
                    
                    gpt_text = '\n'.join(unparsed_lines)
                    gpt_parsed = await yandex_gpt.parse_prices(gpt_text, device_type)
                    
                    if gpt_parsed:
                        gpt_saved = 0
                        
                        # –î–ª—è MacBook –∏ iPad –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
                        if device_type == 'macbook':
                            for item in gpt_parsed:
                                result = await macbook_service_simple.save_macbook_price(item)
                                if result:
                                    gpt_saved += 1
                        elif device_type == 'ipad':
                            for item in gpt_parsed:
                                result = await ipad_service_simple.save_ipad_price(item)
                                if result:
                                    gpt_saved += 1
                        elif device_type == 'apple_watch':
                            for item in gpt_parsed:
                                result = await apple_watch_service_simple.save_apple_watch_price(item)
                                if result:
                                    gpt_saved += 1
                        else:
                            # –î–ª—è –¥—Ä—É–≥–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π —Å–µ—Ä–≤–∏—Å
                            gpt_saved = await db_service.process_parsed_prices(gpt_parsed, f"GPT-{device_type}")
                        
                        if device_type not in results['gpt_results']:
                            results['gpt_results'][device_type] = {'saved': 0, 'parsed': 0}
                        
                        results['gpt_results'][device_type]['parsed'] += len(gpt_parsed)
                        results['gpt_results'][device_type]['saved'] += gpt_saved
                        results['total_saved'] += gpt_saved
                        
                        results['processing_summary'].append(
                            f"ü§ñ {device_type}: {gpt_saved} —á–µ—Ä–µ–∑ GPT"
                        )
                        
                        # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
                        for line in unparsed_lines:
                            processed_lines.add(line.strip())
        
        # –≠—Ç–∞–ø 2: –û—Å—Ç–∞–≤—à–∏–µ—Å—è —Å—Ç—Ä–æ–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ–±—â–∏–π GPT
        remaining_lines = [line for line in lines if line.strip() and line.strip() not in processed_lines]
        
        if remaining_lines:
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º {len(remaining_lines)} –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Å—Ç—Ä–æ–∫ –≤ –æ–±—â–∏–π GPT")
            
            remaining_text = '\n'.join(remaining_lines)
            gpt_parsed = await yandex_gpt.parse_prices(remaining_text)
            
            if gpt_parsed:
                # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ —Ç–∏–ø–∞–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Ö —á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
                macbook_items = [item for item in gpt_parsed if item.get('device', '').lower() == 'macbook' and item.get('firm', '').lower() == 'apple']
                ipad_items = [item for item in gpt_parsed if item.get('device', '').lower().startswith('ipad') and item.get('firm', '').lower() == 'apple']
                apple_watch_items = [item for item in gpt_parsed if item.get('device', '').lower() == 'apple watch' and item.get('firm', '').lower() == 'apple']
                imac_items = [item for item in gpt_parsed if item.get('device', '').lower() in ['imac', 'mac mini'] and item.get('firm', '').lower() == 'apple']
                airpods_items = [item for item in gpt_parsed if item.get('device', '').lower() == 'airpods' and item.get('firm', '').lower() == 'apple']
                other_items = [item for item in gpt_parsed if not (
                    (item.get('device', '').lower() == 'macbook' and item.get('firm', '').lower() == 'apple') or
                    (item.get('device', '').lower().startswith('ipad') and item.get('firm', '').lower() == 'apple') or
                    (item.get('device', '').lower() == 'apple watch' and item.get('firm', '').lower() == 'apple') or
                    (item.get('device', '').lower() in ['imac', 'mac mini'] and item.get('firm', '').lower() == 'apple') or
                    (item.get('device', '').lower() == 'airpods' and item.get('firm', '').lower() == 'apple')
                )]
                
                gpt_saved = 0
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º MacBook —Ç–æ–≤–∞—Ä—ã —á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å
                if macbook_items:
                    logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(macbook_items)} MacBook —Ç–æ–≤–∞—Ä–æ–≤ —á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å")
                    for item in macbook_items:
                        result = await macbook_service_simple.save_macbook_price(item)
                        if result:
                            gpt_saved += 1
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º iPad —Ç–æ–≤–∞—Ä—ã —á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å
                if ipad_items:
                    logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(ipad_items)} iPad —Ç–æ–≤–∞—Ä–æ–≤ —á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å")
                    for item in ipad_items:
                        result = await ipad_service_simple.save_ipad_price(item)
                        if result:
                            gpt_saved += 1
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º Apple Watch —Ç–æ–≤–∞—Ä—ã —á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å
                if apple_watch_items:
                    logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(apple_watch_items)} Apple Watch —Ç–æ–≤–∞—Ä–æ–≤ —á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å")
                    for item in apple_watch_items:
                        result = await self.apple_watch_service.save_apple_watch_price(item)
                        if result:
                            gpt_saved += 1
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º iMac —Ç–æ–≤–∞—Ä—ã —á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å
                if imac_items:
                    logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(imac_items)} iMac —Ç–æ–≤–∞—Ä–æ–≤ —á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å")
                    for item in imac_items:
                        result = await self.imac_service.save_imac_price(item)
                        if result:
                            gpt_saved += 1
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º AirPods —Ç–æ–≤–∞—Ä—ã —á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å
                if airpods_items:
                    logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(airpods_items)} AirPods —Ç–æ–≤–∞—Ä–æ–≤ —á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å")
                    for item in airpods_items:
                        result = await self.airpods_service.save_airpods_price(item)
                        if result:
                            gpt_saved += 1
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã —á–µ—Ä–µ–∑ –æ–±—â–∏–π —Å–µ—Ä–≤–∏—Å
                if other_items:
                    other_saved = await db_service.process_parsed_prices(other_items, "GPT-–æ–±—â–∏–π")
                    gpt_saved += other_saved
                
                results['gpt_results']['general'] = {
                    'parsed': len(gpt_parsed),
                    'saved': gpt_saved
                }
                results['total_saved'] += gpt_saved
                
                results['processing_summary'].append(f"ü§ñ –û–±—â–∏–π GPT: {gpt_saved} —Ç–æ–≤–∞—Ä–æ–≤")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        summary = self._generate_summary(results)
        results['summary'] = summary
        
        logger.info(f"‚úÖ –ì–∏–±—Ä–∏–¥–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –í—Å–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {results['total_saved']}")
        
        return results
    
    def _filter_lines_for_device(self, lines: List[str], keywords: List[str], device_type: str = None) -> List[str]:
        """–§–∏–ª—å—Ç—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        filtered_lines = []
        
        for line in lines:
            line_lower = line.lower()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
            has_keyword = any(keyword in line_lower for keyword in keywords)
            
            # –î–ª—è —Å—Ç—Ä–æ–∫ —Å —Ñ–ª–∞–≥–∞–º–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–æ
            if self._has_flag(line) and device_type:
                if device_type == 'ipad' and 'ipad' in line_lower:
                    has_keyword = True
                elif device_type == 'iphone' and ('iphone' in line_lower or any(k in line_lower for k in ['13', '14', '15', '16', 'pro', 'plus', 'max'])):
                    has_keyword = True
                elif device_type == 'macbook' and 'macbook' in line_lower:
                    has_keyword = True
            
            if has_keyword:
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–∞
                if (self._has_price(line) and 
                    not self._is_exclude_line(line)):
                    
                    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è MacBook - –∏—Å–∫–ª—é—á–∞–µ–º iPhone —Å—Ç—Ä–æ–∫–∏
                    if device_type == 'macbook':
                        # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç iPhone-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                        if self._is_iphone_line(line):
                            continue
                        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - MacBook –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–ª–æ–≤–æ "MacBook" –∏–ª–∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —á–∏–ø—ã
                        if not self._is_macbook_line(line):
                            continue
                    
                    filtered_lines.append(line)
        
        return filtered_lines
    
    def _has_price(self, line: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ü–µ–Ω—ã –≤ —Å—Ç—Ä–æ–∫–µ"""
        import re
        return bool(re.search(r'\d{4,6}', line))
    
    def _has_flag(self, line: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ñ–ª–∞–≥–∞ —Å—Ç—Ä–∞–Ω—ã"""
        import re
        return bool(re.search(r'[üá∫üá∏üáØüáµüáÆüá≥üá®üá≥üá¶üá™üá≠üá∞üá∞üá∑üá™üá∫üá∑üá∫üá®üá¶üáªüá≥]', line))
    
    def _is_iphone_line(self, line: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ iPhone —Å—Ç—Ä–æ–∫–æ–π"""
        import re
        line_lower = line.lower()
        
        # iPhone-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        iphone_patterns = [
            r'\b(13|14|15|16)\s+(128|256|512|1tb)\s+',  # iPhone 13 128GB
            r'\b(13|14|15|16)\s+(plus|pro|max)\s+',     # iPhone 16 Pro
            r'\b(13|14|15|16)\s+(black|white|blue|green|pink|starlight|midnight|natural|desert|ultramarine|teal)\s+',  # iPhone —Å —Ü–≤–µ—Ç–∞–º–∏
            r'\b(13|14|15|16)e\s+',  # iPhone 16E
            r'iphone\s+',  # –°–ª–æ–≤–æ iPhone
        ]
        
        for pattern in iphone_patterns:
            if re.search(pattern, line_lower):
                return True
        
        return False
    
    def _is_macbook_line(self, line: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ MacBook —Å—Ç—Ä–æ–∫–æ–π"""
        import re
        line_lower = line.lower()
        
        # MacBook-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        macbook_patterns = [
            r'macbook\s+',  # –°–ª–æ–≤–æ MacBook
            r'\bm[1-4]\s+',  # –ß–∏–ø—ã M1, M2, M3, M4
            r'\bm[1-4]\s+max\s+',  # –ß–∏–ø—ã M1 Max, M4 Max
            r'\b(air|pro)\s+',  # Air, Pro
        ]
        
        for pattern in macbook_patterns:
            if re.search(pattern, line_lower):
                return True
        
        return False
    
    def _is_exclude_line(self, line: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–∫–ª—é—á–∏—Ç—å —Å—Ç—Ä–æ–∫—É"""
        exclude_words = ['–≥–∞—Ä–∞–Ω—Ç–∏—è', '–∞–∫—Ç–∏–≤–∞—Ü–∏–π', 'adapter', '–æ—Ç 10 —à—Ç']
        line_lower = line.lower()
        return any(word in line_lower for word in exclude_words)
    
    def _generate_summary(self, results: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç"""
        summary_parts = []
        
        if results['processing_summary']:
            summary_parts.append("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
            for item in results['processing_summary']:
                summary_parts.append(f"   {item}")
        
        summary_parts.append(f"\n‚úÖ –í—Å–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {results['total_saved']} —Ç–æ–≤–∞—Ä–æ–≤")
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        template_total = sum(r.get('total_saved', 0) for r in results['template_results'].values())
        gpt_total = sum(r.get('saved', 0) for r in results['gpt_results'].values())
        
        if template_total > 0:
            summary_parts.append(f"üéØ –®–∞–±–ª–æ–Ω–∞–º–∏: {template_total}")
        if gpt_total > 0:
            summary_parts.append(f"ü§ñ GPT: {gpt_total}")
        
        return '\n'.join(summary_parts)

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
hybrid_parser = HybridParser()
