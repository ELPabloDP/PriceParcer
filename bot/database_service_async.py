"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
"""
import logging
from typing import List, Dict, Any, Optional, Tuple
from decimal import Decimal
import os
import django
from django.conf import settings
from asgiref.sync import sync_to_async

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'db_app.settings')
django.setup()

from db_app.models import Product, Markup, MacBook

logger = logging.getLogger(__name__)

class DatabaseService:
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏"""

    async def process_parsed_prices(self, parsed_prices: List[Dict[str, Any]], source: str = "") -> int:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –ø—Ä–∞–π—Å—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –ë–î"""
        from services.iphone_service_simple import iphone_service_simple
        from services.macbook_service_simple import macbook_service_simple
        
        saved_count = 0

        for price_data in parsed_prices:
            try:
                device = price_data.get('device', '').lower()
                firm = price_data.get('firm', '').lower()
                
                # –î–æ–±–∞–≤–ª—è–µ–º source –∫ price_data
                price_data['source'] = source
                
                if firm == 'apple' and device == 'iphone':
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º iPhone –≤ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å
                    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–Ω–∏–º–∞–µ—Ç iPhone –ø–∞—Ä—Å–µ—Ä
                    generation = price_data.get('generation', '')
                    variant = price_data.get('variant', '')
                    configuration = price_data.get('configuration', '')
                    country = price_data.get('country', '')
                    price = price_data.get('price', 0)
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
                    if variant:
                        line = f"{generation}{variant} {configuration} {country} {price}"
                    else:
                        line = f"{generation} {configuration} {country} {price}"
                    
                    result = await iphone_service_simple.parse_and_save_prices(line, source)
                    if result and result.get('saved', 0) > 0:
                        saved_count += result['saved']
                elif firm == 'apple' and device == 'macbook':
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º MacBook –≤ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å
                    saved_item = await macbook_service_simple.save_macbook_price(price_data)
                    if saved_item:
                        saved_count += 1
                else:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –≤ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å
                    if await self._save_product(price_data, source):
                        saved_count += 1
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∞–π—Å–∞: {e}")
                continue

        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {saved_count} –ø—Ä–∞–π—Å–æ–≤ –∏–∑ {len(parsed_prices)}")
        return saved_count

    @sync_to_async
    def _save_product(self, product_data: Dict[str, Any], source: str) -> bool:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
            name_parts = []
            if product_data.get('device'):
                name_parts.append(product_data['device'])
            if product_data.get('generation'):
                name_parts.append(product_data['generation'])
            if product_data.get('variant'):
                name_parts.append(product_data['variant'])
            
            name = " ".join(name_parts) if name_parts else "Unknown"
            
            # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç
            product, created = Product.objects.update_or_create(
                name=name,
                brand=product_data.get('firm', 'Unknown'),
                category=product_data.get('device', 'Unknown'),
                configuration=product_data.get('configuration', ''),
                country=product_data.get('country', 'üá∫üá∏'),
                defaults={
                    'price': Decimal(product_data.get('price', 0)),
                    'source': source
                }
            )
            
            if created:
                logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç: {product}")
            else:
                logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω –ø—Ä–æ–¥—É–∫—Ç: {product}")
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞: {e}")
            return False

    @sync_to_async
    def clear_database(self) -> int:
        """–û—á–∏—â–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            from db_app.models import IPhone, iPad, AppleWatch
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏
            count_iphone = IPhone.objects.count()
            count_macbook = MacBook.objects.count()
            count_ipad = iPad.objects.count()
            count_apple_watch = AppleWatch.objects.count()
            count_product = Product.objects.count()
            
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
            IPhone.objects.all().delete()
            MacBook.objects.all().delete()
            iPad.objects.all().delete()
            AppleWatch.objects.all().delete()
            Product.objects.all().delete()
            
            total_count = count_iphone + count_macbook + count_ipad + count_apple_watch + count_product
            logger.info(f"–û—á–∏—â–µ–Ω–∞ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: —É–¥–∞–ª–µ–Ω–æ {total_count} —Ç–æ–≤–∞—Ä–æ–≤ (iPhone: {count_iphone}, MacBook: {count_macbook}, iPad: {count_ipad}, Apple Watch: {count_apple_watch}, Product: {count_product})")
            return total_count
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            return 0

    @sync_to_async
    def get_current_markup(self) -> float:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é –Ω–∞—Ü–µ–Ω–∫—É"""
        try:
            return float(Markup.get_current_markup())
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Ü–µ–Ω–∫–∏: {e}")
            return 0.0

    @sync_to_async
    def set_markup(self, amount: float) -> bool:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ–≤—É—é –Ω–∞—Ü–µ–Ω–∫—É"""
        try:
            Markup.set_markup(amount)
            logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –Ω–∞—Ü–µ–Ω–∫–∞: {amount}‚ÇΩ")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞—Ü–µ–Ω–∫–∏: {e}")
            return False

db_service = DatabaseService()