import logging
import re
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from typing import Dict, Any

from gptapi import yandex_gpt
from database_service_async import db_service

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≥–∏–±—Ä–∏–¥–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –∏ –∫–∞—Ç–∞–ª–æ–≥
import sys
from pathlib import Path
sys.path.append(str(Path(__file__).parent.parent))
from services.hybrid_parser import hybrid_parser
from services.catalog_service import catalog_service, CatalogService

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
router = Router()

class MarkupState(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Ü–µ–Ω–∫–æ–π"""
    waiting_for_markup = State()

class CatalogStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞"""
    waiting_for_brand = State()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ç–∞–ª–æ–≥–∞
catalog_data = {}
current_catalog_message = None

# –°–æ–∑–¥–∞–µ–º reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
def get_main_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω—É—é reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìã –ö–∞—Ç–∞–ª–æ–≥"), KeyboardButton(text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ë–î")],
            [KeyboardButton(text="üí∞ –ù–∞—Ü–µ–Ω–∫–∞"), KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    return keyboard

def get_markup_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–∞—Ü–µ–Ω–∫–∏"""
    markup_values = [100, 200, 300, 400, 500, 600, 700, 800, 900]
    buttons = []

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 3 –≤ —Ä—è–¥
    for i in range(0, len(markup_values), 3):
        row = []
        for j in range(3):
            if i + j < len(markup_values):
                value = markup_values[i + j]
                row.append(InlineKeyboardButton(
                    text=f"{value}‚ÇΩ",
                    callback_data=f"markup_{value}"
                ))
        buttons.append(row)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="markup_cancel")])

    return InlineKeyboardMarkup(inline_keyboard=buttons)

@router.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–∞–π—Å–æ–≤.\n\n"
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç —Å –ø—Ä–∞–π—Å–∞–º–∏, –∏ —è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Ö —Ä–∞—Å–ø–∞—Ä—Å—é –∏ —Å–æ—Ö—Ä–∞–Ω—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
        reply_markup=get_main_keyboard()
    )

@router.message(Command("help"))
async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
ü§ñ <b>–ë–æ—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–∞–π—Å–æ–≤</b>

<b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>
1. –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç —Å –ø—Ä–∞–π—Å–∞–º–∏
2. –Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å–ø–∞—Ä—Å—é –∏—Ö —Å –ø–æ–º–æ—â—å—é –ò–ò
3. –°–æ—Ö—Ä–∞–Ω—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Ç–æ–ª—å–∫–æ –ª—É—á—à–∏–µ —Ü–µ–Ω—ã

<b>–ö–æ–º–∞–Ω–¥—ã:</b>
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/catalog - –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥
/clear - –û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

<b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –ø—Ä–∞–π—Å–æ–≤:</b>
‚Ä¢ iPhone 13 128GB Midnight üá∫üá∏ ‚Äî 36900‚ÇΩ
‚Ä¢ AirPods Max 2024 Purple ‚Äî 39000‚ÇΩ
‚Ä¢ MacBook Air M3 8/256GB Gray ‚Äî 69000‚ÇΩ
‚Ä¢ DualSense PS5 Black ‚Äî 5300‚ÇΩ

<b>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±—Ä–µ–Ω–¥–∞, –º–æ–¥–µ–ª–∏, –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ª—É—á—à–∏—Ö —Ü–µ–Ω
‚Ä¢ –£–¥–æ–±–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ñ–ª–∞–≥–æ–≤ —Å—Ç—Ä–∞–Ω
"""

    await message.answer(help_text, parse_mode="HTML")

@router.message(F.text == "üìã –ö–∞—Ç–∞–ª–æ–≥")
async def handle_catalog_button(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ö–∞—Ç–∞–ª–æ–≥"""
    await show_catalog(message, state)

@router.message(F.text == "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ë–î")
async def handle_clear_db_button(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –û—á–∏—Å—Ç–∏—Ç—å –ë–î"""
    try:
        count = await db_service.clear_database()
        await message.answer(
            f"üóëÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞!\n\n–£–¥–∞–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {count}",
            reply_markup=get_main_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ë–î: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", reply_markup=get_main_keyboard())

@router.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def handle_help_button(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ü–æ–º–æ—â—å"""
    await cmd_help(message)

@router.message(F.text == "üí∞ –ù–∞—Ü–µ–Ω–∫–∞")
async def handle_markup_button(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞—Ü–µ–Ω–∫–∞'"""
    try:
        current_markup = await db_service.get_current_markup()

        markup_text = f"üí∞ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Ü–µ–Ω–∫–æ–π</b>\n\n"
        markup_text += f"–¢–µ–∫—É—â–∞—è –Ω–∞—Ü–µ–Ω–∫–∞: <b>{current_markup:,.0f}‚ÇΩ</b>\n\n"
        markup_text += "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –Ω–∞—Ü–µ–Ω–∫—É –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—Ä—É—á–Ω—É—é:"

        await message.answer(
            markup_text,
            reply_markup=get_markup_keyboard(),
            parse_mode="HTML"
        )
        await state.set_state(MarkupState.waiting_for_markup)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –Ω–∞—Ü–µ–Ω–∫–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –Ω–∞—Ü–µ–Ω–∫–µ", reply_markup=get_main_keyboard())

@router.message(MarkupState.waiting_for_markup)
async def handle_manual_markup_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –Ω–∞—Ü–µ–Ω–∫–∏"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ
        try:
            markup_value = int(message.text.strip())
            if markup_value < 0:
                await message.answer("‚ùå –ù–∞—Ü–µ–Ω–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                return
        except ValueError:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 500):")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        success = await db_service.set_markup(markup_value)

        if success:
            await message.answer(
                f"‚úÖ <b>–ù–∞—Ü–µ–Ω–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!</b>\n\n–ù–æ–≤–∞—è –Ω–∞—Ü–µ–Ω–∫–∞: <b>{markup_value:,}‚ÇΩ</b>\n\n"
                f"–¢–µ–ø–µ—Ä—å –≤—Å–µ —Ü–µ–Ω—ã –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —Å —É—á–µ—Ç–æ–º –Ω–∞—Ü–µ–Ω–∫–∏.",
                reply_markup=get_main_keyboard(),
                parse_mode="HTML"
            )
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Ü–µ–Ω–∫–∏", reply_markup=get_main_keyboard())

        await state.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –Ω–∞—Ü–µ–Ω–∫–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞—Ü–µ–Ω–∫–∏", reply_markup=get_main_keyboard())
        await state.clear()

@router.message(F.text)
async def handle_text_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø—Ä–∞–π—Å–∞–º–∏ - –Ω–æ–≤–∞—è –≥–∏–±—Ä–∏–¥–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞"""
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±–æ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
        processing_msg = await message.answer("üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø—Ä–∞–π—Å—ã —Å –ø–æ–º–æ—â—å—é —É–º–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤...")

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –≥–∏–±—Ä–∏–¥–Ω—É—é —Å–∏—Å—Ç–µ–º—É
        results = await hybrid_parser.parse_message(message.text, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id}")

        if results['total_saved'] > 0:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
            report = f"üéâ **–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ!**\n\n{results['summary']}\n\n"
            report += "–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üìã –ö–∞—Ç–∞–ª–æ–≥' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞."
            
            await processing_msg.edit_text(report, parse_mode="Markdown")
            await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:", reply_markup=get_main_keyboard())
        else:
            await processing_msg.edit_text(
                "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –ø—Ä–∞–π—Å—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.\n\n"
                "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç:\n"
                "‚Ä¢ –ú–æ–¥–µ–ª—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (iPhone 16, iPad Pro, etc.)\n"
                "‚Ä¢ –û–±—ä–µ–º –ø–∞–º—è—Ç–∏ (128GB, 256GB, etc.)\n"
                "‚Ä¢ –¶–≤–µ—Ç\n"
                "‚Ä¢ –§–ª–∞–≥ —Å—Ç—Ä–∞–Ω—ã üá∫üá∏üáØüáµüáÆüá≥\n"
                "‚Ä¢ –¶–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö"
            )
            await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:", reply_markup=get_main_keyboard())

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–∞–π—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_keyboard()
        )

async def show_catalog(message_or_callback, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ç–∞–ª–æ–≥ - –≤—ã–±–æ—Ä –±—Ä–µ–Ω–¥–∞"""
    try:
        global catalog_data, current_catalog_message

        # –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –ø–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ç–∞–ª–æ–≥–∞ (–±–µ–∑ –∫–µ—à–∞)
        catalog_data = await catalog_service.get_catalog_data()

        if not catalog_data:
            text = "üìã –ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç.\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–∞–π—Å—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞."
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
            ])

            if hasattr(message_or_callback, 'message'):  # CallbackQuery
                await message_or_callback.message.edit_text(text, reply_markup=keyboard)
            else:  # Message
                await message_or_callback.answer(text, reply_markup=keyboard)
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –±—Ä–µ–Ω–¥–∞–º–∏
        keyboard_buttons = []
        for brand_name in sorted(catalog_data.keys()):
            if brand_name != 'Unknown':  # –°–∫—Ä—ã–≤–∞–µ–º Unknown –±—Ä–µ–Ω–¥
                keyboard_buttons.append([InlineKeyboardButton(
                    text=f"üè∑Ô∏è {brand_name}", 
                    callback_data=f"brand_{brand_name}"
                )])

        keyboard_buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])

        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

        text = "üìã <b>–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥:"

        if hasattr(message_or_callback, 'message'):  # CallbackQuery
            await message_or_callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
            current_catalog_message = message_or_callback.message
        else:  # Message
            msg = await message_or_callback.answer(text, reply_markup=keyboard, parse_mode="HTML")
            current_catalog_message = msg

        await state.set_state(CatalogStates.waiting_for_brand)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∫–∞—Ç–∞–ª–æ–≥–∞: {e}")
        if hasattr(message_or_callback, 'answer'):  # CallbackQuery
            await message_or_callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞")
        else:  # Message
            await message_or_callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞", reply_markup=get_main_keyboard())

@router.callback_query(F.data == "catalog")
async def show_catalog_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞"""
    await show_catalog(callback, state)

@router.callback_query(F.data.startswith("brand_"))
async def show_categories(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±—Ä–µ–Ω–¥–∞"""
    try:
        brand = callback.data.replace("brand_", "")
        
        if not catalog_data or brand not in catalog_data:
            await callback.answer("‚ùå –ë—Ä–µ–Ω–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        brand_data = catalog_data[brand]
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        keyboard_buttons = []
        for category_name in sorted(brand_data.keys()):
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            emoji = "üì±"
            if "iPad" in category_name:
                emoji = "üì±"
            elif "MacBook" in category_name or "Mac" in category_name:
                emoji = "üíª"
            elif "AirPods" in category_name:
                emoji = "üéß"
            elif "Watch" in category_name:
                emoji = "‚åö"
            
            # –î–ª—è Apple –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            if brand == "Apple":
                if category_name in ["iPhone", "MacBook", "iPad", "AirPods", "Apple Watch"]:
                    keyboard_buttons.append([InlineKeyboardButton(
                        text=f"{emoji} {category_name}", 
                        callback_data=f"category_{brand}_{category_name}"
                    )])
            else:
                keyboard_buttons.append([InlineKeyboardButton(
                    text=f"{emoji} {category_name}", 
                    callback_data=f"category_{brand}_{category_name}"
                )])

        keyboard_buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –±—Ä–µ–Ω–¥–∞–º", callback_data="catalog")])

        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

        text = f"üè∑Ô∏è <b>{brand}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"

        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π")

@router.callback_query(F.data.startswith("category_"))
async def show_category_items(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    try:
        # –ü–∞—Ä—Å–∏–º callback_data: category_Apple_iPhone
        parts = callback.data.replace("category_", "").split("_", 1)
        if len(parts) != 2:
            await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
            return
            
        brand, category = parts
        
        if not catalog_data or brand not in catalog_data or category not in catalog_data[brand]:
            await callback.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        category_data = catalog_data[brand][category]
        
        # –ï—Å–ª–∏ —ç—Ç–æ iPhone - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–∫–æ–ª–µ–Ω–∏—è
        if category == "iPhone":
            await show_iphone_generations(callback, brand, category_data)
        elif category == "MacBook":
            await show_macbook_categories(callback, brand, category_data)
        elif category == "iPad":
            await show_ipad_categories(callback, brand, category_data)
        elif category == "Apple Watch":
            await show_apple_watch_categories(callback, brand, category_data)
        else:
            # For other categories - show items directly
            await show_category_products(callback, brand, category, category_data)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤")

async def show_iphone_generations(callback, brand, iphone_list):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–∫–æ–ª–µ–Ω–∏—è iPhone"""
    try:
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è–º
        generations = {}
        for phone in iphone_list:
            name = phone['name']
            if 'iPhone 16E' in name or name.endswith('16–ï'):
                generation = '16E'
            elif 'iPhone 16Pro Max' in name:
                generation = '16'
            elif 'iPhone 16Pro' in name:
                generation = '16'
            elif 'iPhone 16Plus' in name:
                generation = '16'
            elif 'iPhone 16' in name:
                generation = '16'
            elif 'iPhone 15' in name:
                generation = '15'
            elif 'iPhone 14' in name:
                generation = '14'
            elif 'iPhone 13' in name:
                generation = '13'
            else:
                generation = '–î—Ä—É–≥–∏–µ'
            
            if generation not in generations:
                generations[generation] = []
            generations[generation].append(phone)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–∫–æ–ª–µ–Ω–∏—è–º–∏
        keyboard_buttons = []
        for generation in sorted(generations.keys()):
            if generation != '–î—Ä—É–≥–∏–µ':
                keyboard_buttons.append([InlineKeyboardButton(
                    text=f"üì± iPhone {generation}", 
                    callback_data=f"generation_{generation}"
                )])
        
        if '–î—Ä—É–≥–∏–µ' in generations:
            keyboard_buttons.append([InlineKeyboardButton(
                text=f"üì± –î—Ä—É–≥–∏–µ iPhone", 
                callback_data=f"generation_–î—Ä—É–≥–∏–µ"
            )])

        keyboard_buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data=f"brand_{brand}")])

        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        text = f"üì± <b>{brand} - iPhone</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∫–æ–ª–µ–Ω–∏–µ:"

        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø–æ–∫–æ–ª–µ–Ω–∏–π iPhone: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–∫–æ–ª–µ–Ω–∏–π")

async def show_macbook_categories(callback, brand, macbook_data):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ MacBook (Air, Pro, iMac)"""
    try:
        keyboard_buttons = []
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º (Air, Pro, iMac)
        variants = {}
        for macbook in macbook_data:
            variant = macbook.get('variant', 'Air')
            if variant not in variants:
                variants[variant] = []
            variants[variant].append(macbook)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤ –Ω—É–∂–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        variant_order = ['Air', 'Pro', 'iMac']
        for variant_name in variant_order:
            if variant_name in variants:
                emoji = "üíª"
                if variant_name == "Air":
                    emoji = "üíª"
                elif variant_name == "Pro":
                    emoji = "üíª"
                elif variant_name == "iMac":
                    emoji = "üñ•Ô∏è"
                
                keyboard_buttons.append([InlineKeyboardButton(
                    text=f"{emoji} MacBook {variant_name}",
                    callback_data=f"macbook_{variant_name}"
                )])
        
        keyboard_buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data=f"brand_{brand}")])
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        text = f"üíª <b>{brand} - MacBook</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π MacBook: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π")

async def show_category_products(callback, brand, category, products):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–¥–ª—è iPad, MacBook, etc.)"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –Ω–∞—Ü–µ–Ω–∫—É
        current_markup = await catalog_service.get_current_markup()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–æ–≤–∞—Ä–∞–º–∏
        emoji = "üì±"
        if "iPad" in category:
            emoji = "üì±"
        elif "MacBook" in category or "Mac" in category:
            emoji = "üíª"
        elif "AirPods" in category:
            emoji = "üéß"
        elif "Watch" in category:
            emoji = "‚åö"
            
        message_text = f"{emoji} <b>{brand} - {category}</b>\n\n"
        
        for product in products:
            config = product.get('configuration', '')
            if config:
                message_text += f"  {product['country']} {config} ‚Äî <b>{product['display_price']:,}‚ÇΩ</b>\n"
            else:
                message_text += f"  {product['country']} {product['name']} ‚Äî <b>{product['display_price']:,}‚ÇΩ</b>\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data=f"brand_{brand}")]
        ])
        
        await callback.message.edit_text(
            message_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤")

@router.callback_query(F.data.startswith("generation_"))
async def show_generation_phones(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç iPhone –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è"""
    try:
        generation = callback.data.replace("generation_", "")
        
        if not catalog_data or 'Apple' not in catalog_data or 'iPhone' not in catalog_data['Apple']:
            await callback.answer("‚ùå –ö–∞—Ç–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # iPhone –∫–∞—Ç–∞–ª–æ–≥ - —ç—Ç–æ —Å–ø–∏—Å–æ–∫, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø–æ–∫–æ–ª–µ–Ω–∏—é
        iphone_list = catalog_data['Apple']['iPhone']
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º iPhone –ø–æ –ø–æ–∫–æ–ª–µ–Ω–∏—é
        phones = []
        for phone in iphone_list:
            name = phone['name']
            phone_generation = None
            
            if generation == '16E' and ('iPhone 16E' in name or name.endswith('16–ï')):
                phone_generation = '16E'
            elif generation == '16':
                if ('iPhone 16' in name and 'iPhone 16E' not in name) or 'iPhone 16Pro' in name or 'iPhone 16Plus' in name:
                    phone_generation = '16'
            elif f'iPhone {generation}' in name:
                phone_generation = generation
            elif generation == '–î—Ä—É–≥–∏–µ':
                # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ iPhone
                if not any(f'iPhone {g}' in name for g in ['13', '14', '15', '16']) and 'iPhone 16E' not in name:
                    phone_generation = '–î—Ä—É–≥–∏–µ'
            
            if phone_generation == generation:
                phones.append(phone)
        
        if not phones:
            await callback.answer("‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∞–π—Å–∞–º–∏
        message_text = f"üì± <b>iPhone {generation}</b>\n\n"
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º (–æ–±—ã—á–Ω—ã–π, Pro, Plus, Pro Max)
        variants = {}
        for phone in phones:
            name = phone['name']
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø
            if 'Pro Max' in name:
                variant = 'Pro Max'
            elif 'Pro' in name:
                variant = 'Pro'
            elif 'Plus' in name:
                variant = 'Plus'
            elif generation == '16E':
                variant = 'E'
            else:
                variant = '–æ–±—ã—á–Ω—ã–π'
            
            if variant not in variants:
                variants[variant] = []
            variants[variant].append(phone)
        
        # –í—ã–≤–æ–¥–∏–º –ø–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º
        for variant_name, variant_phones in variants.items():
            if variant_name == "–æ–±—ã—á–Ω—ã–π":
                message_text += f"<b>iPhone {generation}:</b>\n"
            elif variant_name == "E":
                message_text += f"<b>iPhone {generation}E:</b>\n"
            else:
                message_text += f"<b>iPhone {generation} {variant_name}:</b>\n"
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø–∞–º—è—Ç–∏ (—Ç–æ–ª—å–∫–æ GB, –±–µ–∑ —Ü–≤–µ—Ç–∞)
            memory_groups = {}
            for phone in variant_phones:
                config = phone.get('configuration', '')
                if not config:
                    # –ï—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
                    clean_name = phone['name'].replace(f'iPhone {generation}', '').replace('iPhone', '').strip()
                    if variant_name != '–æ–±—ã—á–Ω—ã–π' and variant_name in clean_name:
                        clean_name = clean_name.replace(variant_name, '').strip()
                    config = clean_name
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–∞–º—è—Ç—å (128GB, 256GB, 512GB, etc.)
                import re
                memory_match = re.search(r'(\d+GB)', config)
                if memory_match:
                    memory = memory_match.group(1)
                else:
                    memory = config  # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ GB, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                
                if memory not in memory_groups:
                    memory_groups[memory] = []
                memory_groups[memory].append(phone)
            
            # –í—ã–≤–æ–¥–∏–º —Ç–æ–≤–∞—Ä—ã –ø–æ –≥—Ä—É–ø–ø–∞–º –ø–∞–º—è—Ç–∏
            for memory, memory_phones in memory_groups.items():
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å—Ç—Ä–∞–Ω–∞–º –≤–Ω—É—Ç—Ä–∏ –≥—Ä—É–ø–ø—ã –ø–∞–º—è—Ç–∏
                memory_phones.sort(key=lambda x: x['country'])
                
                for phone in memory_phones:
                    config = phone.get('configuration', '')
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ iPhone —Å –≤–∞—Ä–∏–∞–Ω—Ç–æ–º
                    iphone_name = f"iPhone {generation}"
                    if variant_name != '–æ–±—ã—á–Ω—ã–π':
                        iphone_name += f" {variant_name}"
                    message_text += f"   {iphone_name} {config} ‚Äî <b>{phone['display_price']:,}‚ÇΩ</b>{phone['country']}\n"
                message_text += "\n"  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –≥—Ä—É–ø–ø–∞–º–∏ –ø–∞–º—è—Ç–∏
            
            message_text += "\n"  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –ø–æ–∫–æ–ª–µ–Ω–∏—è–º", callback_data="category_Apple_iPhone")]
        ])
        
        await callback.message.edit_text(
            message_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø–æ–∫–æ–ª–µ–Ω–∏—è iPhone: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö")

@router.callback_query(F.data.startswith("macbook_"))
async def show_macbook_products(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã MacBook –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    try:
        variant = callback.data.replace("macbook_", "")
        if not catalog_data or 'Apple' not in catalog_data or 'MacBook' not in catalog_data['Apple']:
            await callback.answer("‚ùå –ö–∞—Ç–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        macbook_list = catalog_data['Apple']['MacBook']
        products = []
        for macbook in macbook_list:
            macbook_variant = macbook.get('variant', 'Air')
            if macbook_variant == variant:
                products.append(macbook)
        
        if not products:
            await callback.answer("‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É —ç–∫—Ä–∞–Ω–∞ –∏ —á–∏–ø—É (13 M1, 13 M2, 15 M4, etc.)
        size_chip_groups = {}
        for product in products:
            generation = product.get('generation', '')
            size = product.get('size', '')
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏–ø –∏–∑ –ø–æ–∫–æ–ª–µ–Ω–∏—è (M1, M2, M3, M4)
            import re
            chip_match = re.search(r'(M\d+)', generation)
            if chip_match:
                chip = chip_match.group(1)
            else:
                chip = generation
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏: —Ä–∞–∑–º–µ—Ä + —á–∏–ø
            group_key = f"{size} {chip}" if size else chip
            
            if group_key not in size_chip_groups:
                size_chip_groups[group_key] = []
            size_chip_groups[group_key].append(product)
        
        message_text = f"üíª <b>MacBook {variant}</b>\n\n"
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≥—Ä—É–ø–ø—ã –ø–æ —Ä–∞–∑–º–µ—Ä—É –∏ —á–∏–ø—É
        def sort_key(item):
            key = item[0]
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏ —á–∏–ø –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
            size_match = re.search(r'(\d+)', key)
            chip_match = re.search(r'(M\d+)', key)
            
            size = int(size_match.group(1)) if size_match else 0
            chip_num = int(chip_match.group(1)[1:]) if chip_match else 0
            
            return (size, chip_num)
        
        sorted_groups = sorted(size_chip_groups.items(), key=sort_key)
        
        # –í—ã–≤–æ–¥–∏–º —Ç–æ–≤–∞—Ä—ã –ø–æ –≥—Ä—É–ø–ø–∞–º
        for group_key, group_products in sorted_groups:
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø–∞–º—è—Ç–∏ –≤–Ω—É—Ç—Ä–∏ –≥—Ä—É–ø–ø—ã
            memory_groups = {}
            for product in group_products:
                memory = product.get('memory', '')
                if not memory:
                    # –ï—Å–ª–∏ –ø–∞–º—è—Ç—å –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                    config = product.get('configuration', '')
                    memory_match = re.search(r'(\d+GB)', config)
                    memory = memory_match.group(1) if memory_match else '8GB'
                
                if memory not in memory_groups:
                    memory_groups[memory] = []
                memory_groups[memory].append(product)
            
            # –í—ã–≤–æ–¥–∏–º –≥—Ä—É–ø–ø—É
            message_text += f"<b>MacBook {variant} {group_key}</b>\n"
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≥—Ä—É–ø–ø—ã –ø–∞–º—è—Ç–∏ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é
            sorted_memory_groups = sorted(memory_groups.items(), key=lambda item: int(re.search(r'(\d+)', item[0]).group(1)) if re.search(r'(\d+)', item[0]) else 0)
            
            # –í—ã–≤–æ–¥–∏–º —Ç–æ–≤–∞—Ä—ã –ø–æ –≥—Ä—É–ø–ø–∞–º –ø–∞–º—è—Ç–∏
            for memory, memory_products in sorted_memory_groups:
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É –¥–∏—Å–∫–∞ –≤–Ω—É—Ç—Ä–∏ –≥—Ä—É–ø–ø—ã –ø–∞–º—è—Ç–∏
                storage_groups = {}
                for product in memory_products:
                    storage = product.get('storage', '')
                    if not storage:
                        # –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä –¥–∏—Å–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω, –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                        config = product.get('configuration', '')
                        storage_match = re.search(r'(\d+GB)', config)
                        if storage_match:
                            storage = storage_match.group(1)
                        else:
                            # –ò—â–µ–º –≤—Ç–æ—Ä–æ–π GB –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–ø–µ—Ä–≤—ã–π - –ø–∞–º—è—Ç—å, –≤—Ç–æ—Ä–æ–π - –¥–∏—Å–∫)
                            gb_matches = re.findall(r'(\d+GB)', config)
                            if len(gb_matches) > 1:
                                storage = gb_matches[1]
                            else:
                                storage = '256GB'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    
                    if storage not in storage_groups:
                        storage_groups[storage] = []
                    storage_groups[storage].append(product)
                
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≥—Ä—É–ø–ø—ã –¥–∏—Å–∫–∞ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é
                sorted_storage_groups = sorted(storage_groups.items(), key=lambda item: int(re.search(r'(\d+)', item[0]).group(1)) if re.search(r'(\d+)', item[0]) else 0)
                
                # –í—ã–≤–æ–¥–∏–º —Ç–æ–≤–∞—Ä—ã –ø–æ –≥—Ä—É–ø–ø–∞–º –¥–∏—Å–∫–∞
                for storage, storage_products in sorted_storage_groups:
                    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å—Ç—Ä–∞–Ω–∞–º –≤–Ω—É—Ç—Ä–∏ –≥—Ä—É–ø–ø—ã –¥–∏—Å–∫–∞
                    storage_products.sort(key=lambda x: x['country'] or '')
                    
                    for product in storage_products:
                        config = product.get('configuration', '')
                        product_code = product.get('product_code', '')
                        country = product.get('country', '')
                        final_price = product['display_price']
                        
                        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                        # –ï—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø–∞–º—è—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä "16GB 16GB 256GB"), –∏—Å–ø—Ä–∞–≤–ª—è–µ–º
                        import re
                        config_cleaned = re.sub(r'(\d+GB)\s+\1\s+', r'\1 ', config)
                        
                        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É: —Ñ–ª–∞–≥ + –∫–æ–¥ + –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
                        if country:
                            if product_code:
                                message_text += f"  {country} {product_code} {config_cleaned} ‚Äî <b>{final_price:,}‚ÇΩ</b>\n"
                            else:
                                message_text += f"  {country} {config_cleaned} ‚Äî <b>{final_price:,}‚ÇΩ</b>\n"
                        else:
                            if product_code:
                                message_text += f"  {product_code} {config_cleaned} ‚Äî <b>{final_price:,}‚ÇΩ</b>\n"
                            else:
                                message_text += f"  {config_cleaned} ‚Äî <b>{final_price:,}‚ÇΩ</b>\n"
                    message_text += "\n"  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –≥—Ä—É–ø–ø–∞–º–∏ –ø–∞–º—è—Ç–∏
            
            message_text += "\n"  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –≥—Ä—É–ø–ø–∞–º–∏
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="category_Apple_MacBook")]
        ])
        await callback.message.edit_text(
            message_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ç–æ–≤–∞—Ä–æ–≤ MacBook: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö")

async def show_ipad_categories(callback, brand, ipad_data):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ iPad"""
    try:
        if not ipad_data:
            await callback.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö iPad")
            return
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º iPad
        categories = {}
        for ipad in ipad_data:
            variant = ipad.get('variant', '')
            generation = ipad.get('generation', '')
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ variant –∏ generation
            if variant == 'Mini':
                category = 'Mini'
            elif variant == 'Air':
                category = 'Air'
            elif variant == 'Pro':
                category = 'Pro'
            elif generation and generation.isdigit():
                # –ï—Å–ª–∏ generation - —ç—Ç–æ —á–∏—Å–ª–æ (9, 10, 11), —Ç–æ —ç—Ç–æ –æ–±—ã—á–Ω—ã–π iPad
                category = 'iPad'
            else:
                # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–±—ã—á–Ω—ã–π iPad
                category = 'iPad'
            
            if category not in categories:
                categories[category] = []
            categories[category].append(ipad)
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        buttons = []
        for category, products in categories.items():
            if category == 'iPad':
                display_name = 'iPad'
            else:
                display_name = f'iPad {category}'
            buttons.append([InlineKeyboardButton(
                text=f"üì± {display_name}",
                callback_data=f"ipad_{category}"
            )])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="brand_Apple")])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        await callback.message.edit_text(
            "üì± –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é iPad:",
            reply_markup=keyboard
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π iPad: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö")

@router.callback_query(F.data.startswith("ipad_"))
async def show_ipad_products(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã iPad –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    try:
        variant = callback.data.replace("ipad_", "")
        if not catalog_data or 'Apple' not in catalog_data or 'iPad' not in catalog_data['Apple']:
            await callback.answer("‚ùå –ö–∞—Ç–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        ipad_list = catalog_data['Apple']['iPad']
        products = []
        for ipad in ipad_list:
            ipad_variant = ipad.get('variant', '')
            ipad_generation = ipad.get('generation', '')
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é iPad
            if ipad_variant == 'Mini':
                ipad_category = 'Mini'
            elif ipad_variant == 'Air':
                ipad_category = 'Air'
            elif ipad_variant == 'Pro':
                ipad_category = 'Pro'
            elif ipad_generation and ipad_generation.isdigit():
                ipad_category = 'iPad'
            else:
                ipad_category = 'iPad'
            
            # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π
            if ipad_category == variant:
                products.append(ipad)
        
        if not products:
            await callback.answer("‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É –∏ –ø–æ–∫–æ–ª–µ–Ω–∏—é
        groups = {}
        for product in products:
            size = product.get('size', '')
            generation = product.get('generation', '')
            variant_name = product.get('variant', '')
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
            if variant_name == 'Mini':
                group_key = f"iPad Mini {size}"
            elif variant_name == 'Air':
                group_key = f"iPad Air {size}"
            elif variant_name == 'Pro':
                group_key = f"iPad Pro {size}"
            elif generation and generation.isdigit():
                group_key = f"iPad {generation}"
            else:
                group_key = f"iPad {size}" if size else "iPad"
            
            if group_key not in groups:
                groups[group_key] = []
            groups[group_key].append(product)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≥—Ä—É–ø–ø—ã
        sorted_groups = sorted(groups.items(), key=lambda x: x[0])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        if variant == 'iPad':
            message_text = "üì± iPad\n\n"
        else:
            message_text = f"üì± iPad {variant}\n\n"
        
        for group_name, group_products in sorted_groups:
            message_text += f"<b>{group_name}</b>\n"
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –æ–±—ä–µ–º—É –ø–∞–º—è—Ç–∏ –≤–Ω—É—Ç—Ä–∏ –≥—Ä—É–ø–ø—ã
            memory_groups = {}
            for product in group_products:
                storage = product.get('storage', '')
                if not storage:
                    storage = '128GB'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                
                if storage not in memory_groups:
                    memory_groups[storage] = []
                memory_groups[storage].append(product)
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≥—Ä—É–ø–ø—ã –ø–∞–º—è—Ç–∏ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é
            sorted_memory_groups = sorted(memory_groups.items(), key=lambda item: int(re.search(r'(\d+)', item[0]).group(1)) if re.search(r'(\d+)', item[0]) else 0)
            
            # –í—ã–≤–æ–¥–∏–º —Ç–æ–≤–∞—Ä—ã –ø–æ –≥—Ä—É–ø–ø–∞–º –ø–∞–º—è—Ç–∏
            for storage, storage_products in sorted_memory_groups:
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å—Ç—Ä–∞–Ω–∞–º –≤–Ω—É—Ç—Ä–∏ –≥—Ä—É–ø–ø—ã –ø–∞–º—è—Ç–∏
                storage_products.sort(key=lambda x: x['country'] or '')
                
                for product in storage_products:
                    config = product.get('configuration', '')
                    product_code = product.get('product_code', '')
                    country = product.get('country', '')
                    final_price = product['display_price']
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É: —Ñ–ª–∞–≥ + –∫–æ–¥ + –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
                    if country:
                        if product_code:
                            message_text += f"  {country} {product_code} {config} ‚Äî <b>{final_price:,}‚ÇΩ</b>\n"
                        else:
                            message_text += f"  {country} {config} ‚Äî <b>{final_price:,}‚ÇΩ</b>\n"
                    else:
                        if product_code:
                            message_text += f"  {product_code} {config} ‚Äî <b>{final_price:,}‚ÇΩ</b>\n"
                        else:
                            message_text += f"  {config} ‚Äî <b>{final_price:,}‚ÇΩ</b>\n"
                message_text += "\n"  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –≥—Ä—É–ø–ø–∞–º–∏ –ø–∞–º—è—Ç–∏
            
            message_text += "\n"  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –≥—Ä—É–ø–ø–∞–º–∏
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="category_Apple_iPad")]
        ])
        await callback.message.edit_text(
            message_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ç–æ–≤–∞—Ä–æ–≤ iPad: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö")

@router.callback_query(F.data == "clear_db")
async def clear_database(callback: CallbackQuery):
    """–û—á–∏—â–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        count = await db_service.clear_database()

        await callback.message.edit_text(
            f"üóëÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞!\n\n–£–¥–∞–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {count}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
            ])
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ë–î: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")

@router.callback_query(F.data == "back_to_main")
async def back_to_main(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        await state.clear()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await callback.message.answer(
            "ü§ñ <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
            "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç —Å –ø—Ä–∞–π—Å–∞–º–∏, –∏ —è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Ö —Ä–∞—Å–ø–∞—Ä—Å—é –∏ —Å–æ—Ö—Ä–∞–Ω—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
            reply_markup=get_main_keyboard(),
            parse_mode="HTML"
        )

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.delete()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@router.message(Command("catalog"))
async def cmd_catalog(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞"""
    await show_catalog(message, state)

@router.message(Command("clear"))
async def cmd_clear(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        count = await db_service.clear_database()
        await message.answer(f"üóëÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞! –£–¥–∞–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {count}", reply_markup=get_main_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ë–î: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", reply_markup=get_main_keyboard())

@router.callback_query(F.data.startswith("markup_"))
async def handle_markup_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–æ–∫ –Ω–∞—Ü–µ–Ω–∫–∏"""
    try:
        if callback.data == "markup_cancel":
            await callback.message.edit_text("‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Ü–µ–Ω–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            await state.clear()
            await callback.answer()
            return
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Ü–µ–Ω–∫–∏
        markup_value = int(callback.data.replace("markup_", ""))
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        success = await db_service.set_markup(markup_value)
        
        if success:
            await callback.message.edit_text(
                f"‚úÖ <b>–ù–∞—Ü–µ–Ω–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!</b>\n\n–ù–æ–≤–∞—è –Ω–∞—Ü–µ–Ω–∫–∞: <b>{markup_value:,}‚ÇΩ</b>\n\n"
                f"–¢–µ–ø–µ—Ä—å –≤—Å–µ —Ü–µ–Ω—ã –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —Å —É—á–µ—Ç–æ–º –Ω–∞—Ü–µ–Ω–∫–∏.",
                parse_mode="HTML"
            )
        else:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Ü–µ–Ω–∫–∏")
        
        await state.clear()
        await callback.answer(f"‚úÖ –ù–∞—Ü–µ–Ω–∫–∞ {markup_value}‚ÇΩ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback –Ω–∞—Ü–µ–Ω–∫–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞—Ü–µ–Ω–∫–∏")

async def show_apple_watch_categories(callback, brand, apple_watch_data):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ Apple Watch"""
    try:
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å–µ—Ä–∏—è–º
        categories = {}
        for watch in apple_watch_data:
            series = watch.get('series', '')
            if not series:
                continue
                
            if series not in categories:
                categories[series] = []
            categories[series].append(watch)
        
        if not categories:
            await callback.message.edit_text("‚ùå Apple Watch –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        buttons = []
        for series, products in categories.items():
            display_name = f'Apple Watch {series}'
            buttons.append([InlineKeyboardButton(
                text=f"‚åö {display_name}",
                callback_data=f"apple_watch_{series}"
            )])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        buttons.append([InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥ –∫ –±—Ä–µ–Ω–¥–∞–º",
            callback_data="show_brands"
        )])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        await callback.message.edit_text(
            "‚åö <b>Apple Watch</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–∏—é:",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π Apple Watch: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π")

@router.callback_query(F.data.startswith("apple_watch_"))
async def show_apple_watch_products(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã Apple Watch –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–µ—Ä–∏–∏"""
    try:
        series = callback.data.replace("apple_watch_", "")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞—Ç–∞–ª–æ–≥–∞
        catalog_service = CatalogService()
        catalog_data = await catalog_service.get_catalog_data()
        
        if 'Apple' not in catalog_data or 'Apple Watch' not in catalog_data['Apple']:
            await callback.answer("‚ùå Apple Watch –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        apple_watch_list = catalog_data['Apple']['Apple Watch']
        products = []
        
        for watch in apple_watch_list:
            watch_series = watch.get('series', '')
            
            # –ï—Å–ª–∏ —Å–µ—Ä–∏—è —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π
            if watch_series == series:
                products.append(watch)
        
        if not products:
            await callback.answer("‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä–∞–º
        size_groups = {}
        for product in products:
            size = product.get('size', '')
            if size not in size_groups:
                size_groups[size] = []
            size_groups[size].append(product)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = f"‚åö <b>Apple Watch {series}</b>\n\n"
        
        for size, size_products in sorted(size_groups.items()):
            if size:
                message_text += f"<b>üìè {size}mm</b>\n"
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ü–≤–µ—Ç—É –∫–æ—Ä–ø—É—Å–∞
            size_products.sort(key=lambda x: x.get('case_color', ''))
            
            for product in size_products:
                country = product.get('country', '')
                product_code = product.get('product_code', '')
                config = product.get('configuration', '')
                final_price = product.get('display_price', 0)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É: —Ñ–ª–∞–≥ –∫–æ–¥ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ‚Äî —Ü–µ–Ω–∞
                if product_code:
                    message_text += f"  {country} {product_code} {config} ‚Äî <b>{final_price:,}‚ÇΩ</b>\n"
                else:
                    message_text += f"  {country} {config} ‚Äî <b>{final_price:,}‚ÇΩ</b>\n"
            
            message_text += "\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
        buttons = [[InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥ –∫ Apple Watch",
            callback_data="show_category_Apple_Apple Watch"
        )]]
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        await callback.message.edit_text(
            message_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ç–æ–≤–∞—Ä–æ–≤ Apple Watch: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤")