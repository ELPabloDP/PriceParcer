import logging
from typing import List, Dict, Any, Optional, Tuple
from decimal import Decimal
import os
import django
from django.conf import settings
from asgiref.sync import sync_to_async

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'db_app.settings')
django.setup()

from db_app.models import (
    Brand, ProductCategory, ProductModel, ProductVariant, 
    ProductSpecification, ProductColor, Country, Product, 
    PriceRecord, BestPrice
)

logger = logging.getLogger(__name__)

class DatabaseService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏ —Ü–µ–Ω"""
    
    def __init__(self):
        self.country_flags = {
            "üá∫üá∏": "–°–®–ê",
            "üá∞üá∑": "–Æ–∂–Ω–∞—è –ö–æ—Ä–µ—è", 
            "üá™üá∫": "–ï–≤—Ä–æ–ø–∞",
            "üá≠üá∞": "–ì–æ–Ω–∫–æ–Ω–≥",
            "üáÆüá≥": "–ò–Ω–¥–∏—è",
            "üá¶üá™": "–û–ê–≠",
            "üá∑üá∫": "–†–æ—Å—Å–∏—è",
            "üá®üá≥": "–ö–∏—Ç–∞–π",
            "üáØüáµ": "–Ø–ø–æ–Ω–∏—è"
        }
    
    def get_or_create_brand(self, brand_name: str) -> Brand:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –±—Ä–µ–Ω–¥"""
        brand, created = Brand.objects.get_or_create(
            name=brand_name,
            defaults={'name': brand_name}
        )
        if created:
            logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –±—Ä–µ–Ω–¥: {brand_name}")
        return brand
    
    def get_or_create_category(self, brand: Brand, category_name: str) -> ProductCategory:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–æ–¥—É–∫—Ç–∞"""
        category, created = ProductCategory.objects.get_or_create(
            name=category_name,
            brand=brand,
            defaults={'name': category_name, 'brand': brand}
        )
        if created:
            logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {brand.name} {category_name}")
        return category
    
    def get_or_create_model(self, category: ProductCategory, model_name: str) -> ProductModel:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –º–æ–¥–µ–ª—å –ø—Ä–æ–¥—É–∫—Ç–∞"""
        model, created = ProductModel.objects.get_or_create(
            name=model_name,
            category=category,
            defaults={'name': model_name, 'category': category}
        )
        if created:
            logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –º–æ–¥–µ–ª—å: {category} {model_name}")
        return model
    
    def get_or_create_variant(self, category: ProductCategory, variant_name: str) -> Optional[ProductVariant]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç –ø—Ä–æ–¥—É–∫—Ç–∞"""
        if not variant_name:
            return None
            
        variant, created = ProductVariant.objects.get_or_create(
            name=variant_name,
            category=category,
            defaults={'name': variant_name, 'category': category}
        )
        if created:
            logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: {category} {variant_name}")
        return variant
    
    def get_or_create_specification(self, category: ProductCategory, spec_name: str) -> Optional[ProductSpecification]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é –ø—Ä–æ–¥—É–∫—Ç–∞"""
        if not spec_name:
            return None
            
        spec, created = ProductSpecification.objects.get_or_create(
            name=spec_name,
            category=category,
            defaults={'name': spec_name, 'category': category}
        )
        if created:
            logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è: {category} {spec_name}")
        return spec
    
    def get_or_create_color(self, category: ProductCategory, color_name: str) -> Optional[ProductColor]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç —Ü–≤–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–∞"""
        if not color_name:
            return None
            
        color, created = ProductColor.objects.get_or_create(
            name=color_name,
            category=category,
            defaults={'name': color_name, 'category': color_name}
        )
        if created:
            logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ü–≤–µ—Ç: {category} {color_name}")
        return color
    
    def get_or_create_country(self, country_flag: str) -> Country:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä–∞–Ω—É"""
        country_name = self.country_flags.get(country_flag, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä–∞–Ω–∞")
        
        country, created = Country.objects.get_or_create(
            flag=country_flag,
            defaults={'name': country_name, 'flag': country_flag}
        )
        if created:
            logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∞: {country_flag} {country_name}")
        return country
    
    def parse_configuration(self, config: str) -> Tuple[Optional[str], Optional[str]]:
        """–ü–∞—Ä—Å–∏—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –Ω–∞ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é –∏ —Ü–≤–µ—Ç"""
        if not config:
            return None, None
            
        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ - –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å
        parts = config.split()
        spec_parts = []
        color_parts = []
        
        # –¶–≤–µ—Ç–∞ –æ–±—ã—á–Ω–æ –≤ –∫–æ–Ω—Ü–µ
        color_keywords = ['Midnight', 'Blue', 'Starlight', 'Green', 'Pink', 'Red', 'Gold', 'Graphite', 
                         'Purple', 'Silver', 'Gray', 'Black', 'White', 'Rose', 'Cobalt', 'Indigo',
                         'Sterling', 'Jasper', 'Ceramic', 'Prussian', 'Vinca', 'Topaz']
        
        for part in parts:
            if any(color in part for color in color_keywords):
                color_parts.append(part)
            else:
                spec_parts.append(part)
        
        spec = " ".join(spec_parts) if spec_parts else None
        color = " ".join(color_parts) if color_parts else None
        
        return spec, color
    
    def create_or_update_product(self, product_data: Dict[str, Any]) -> Optional[Product]:
        """–°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–¥—É–∫—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –±—Ä–µ–Ω–¥
            brand = self.get_or_create_brand(product_data.get('firm', ''))
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            category = self.get_or_create_category(brand, product_data.get('device', ''))
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å
            model = self.get_or_create_model(category, product_data.get('generation', ''))
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç
            variant = self.get_or_create_variant(category, product_data.get('variant', ''))
            
            # –ü–∞—Ä—Å–∏–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            spec_name, color_name = self.parse_configuration(product_data.get('configuration', ''))
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é –∏ —Ü–≤–µ—Ç
            specification = self.get_or_create_specification(category, spec_name) if spec_name else None
            color = self.get_or_create_color(category, color_name) if color_name else None
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω—É
            country = self.get_or_create_country(product_data.get('country', ''))
            
            # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç
            product, created = Product.objects.get_or_create(
                model=model,
                variant=variant,
                specification=specification,
                color=color,
                country=country,
                defaults={
                    'product_code': product_data.get('product_code', ''),
                    'model': model,
                    'variant': variant,
                    'specification': specification,
                    'color': color,
                    'country': country
                }
            )
            
            if created:
                logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç: {product.full_name}")
            
            return product
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞: {e}")
            return None
    
    def save_price_record(self, product: Product, price: int, source: str = "") -> Optional[PriceRecord]:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–ø–∏—Å—å –æ —Ü–µ–Ω–µ"""
        try:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Ü–µ–Ω–µ
            price_record = PriceRecord.objects.create(
                product=product,
                price=Decimal(price),
                source=source
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ª—É—á—à—É—é —Ü–µ–Ω—É
            self.update_best_price(product, price_record)
            
            logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Ü–µ–Ω–∞: {product.full_name} - {price}‚ÇΩ")
            return price_record
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã: {e}")
            return None
    
    def update_best_price(self, product: Product, new_price_record: PriceRecord):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ª—É—á—à—É—é —Ü–µ–Ω—É –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞"""
        try:
            best_price, created = BestPrice.objects.get_or_create(
                product=product,
                defaults={'price_record': new_price_record}
            )
            
            if not created:
                # –ï—Å–ª–∏ –Ω–æ–≤–∞—è —Ü–µ–Ω–∞ –ª—É—á—à–µ (–º–µ–Ω—å—à–µ), –æ–±–Ω–æ–≤–ª—è–µ–º
                if new_price_record.final_price < best_price.price_record.final_price:
                    best_price.price_record = new_price_record
                    best_price.save()
                    logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∞ –ª—É—á—à–∞—è —Ü–µ–Ω–∞ –¥–ª—è {product.full_name}: {new_price_record.final_price}‚ÇΩ")
            else:
                logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ª—É—á—à–∞—è —Ü–µ–Ω–∞ –¥–ª—è {product.full_name}: {new_price_record.final_price}‚ÇΩ")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª—É—á—à–µ–π —Ü–µ–Ω—ã: {e}")
    
    def process_parsed_prices(self, parsed_prices: List[Dict[str, Any]], source: str = "") -> int:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –ø—Ä–∞–π—Å—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –ë–î"""
        saved_count = 0
        
        for price_data in parsed_prices:
            try:
                # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç
                product = self.create_or_update_product(price_data)
                if not product:
                    continue
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–Ω—É
                price = price_data.get('price', 0)
                if price and price > 0:
                    self.save_price_record(product, price, source)
                    saved_count += 1
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∞–π—Å–∞: {e}")
                continue
        
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {saved_count} –ø—Ä–∞–π—Å–æ–≤ –∏–∑ {len(parsed_prices)}")
        return saved_count
    
    def get_catalog_data(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞"""
        try:
            brands = Brand.objects.all().order_by('name')
            catalog = {}
            
            for brand in brands:
                categories = brand.categories.all().order_by('name')
                brand_data = {}
                
                for category in categories:
                    models = category.models.all().order_by('name')
                    category_data = {}
                    
                    for model in models:
                        # –ü–æ–ª—É—á–∞–µ–º –ª—É—á—à–∏–µ —Ü–µ–Ω—ã –¥–ª—è —ç—Ç–æ–π –º–æ–¥–µ–ª–∏
                        products = model.products.all()
                        model_data = []
                        
                        for product in products:
                            if hasattr(product, 'best_price') and product.best_price:
                                price_record = product.best_price.price_record
                                model_data.append({
                                    'id': product.id,
                                    'name': product.full_name,
                                    'price': int(price_record.final_price),
                                    'country': product.country.flag
                                })
                        
                        if model_data:
                            category_data[model.name] = model_data
                    
                    if category_data:
                        brand_data[category.name] = category_data
                
                if brand_data:
                    catalog[brand.name] = brand_data
            
            return catalog
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ç–∞–ª–æ–≥–∞: {e}")
            return {}
    
    def clear_database(self) -> int:
        """–û—á–∏—â–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            from db_app.models import IPhone, MacBook, iPad, AppleWatch
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏
            count_iphone = IPhone.objects.count()
            count_macbook = MacBook.objects.count()
            count_ipad = iPad.objects.count()
            count_apple_watch = AppleWatch.objects.count()
            count_product = Product.objects.count()
            
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
            IPhone.objects.all().delete()
            MacBook.objects.all().delete()
            iPad.objects.all().delete()
            AppleWatch.objects.all().delete()
            Product.objects.all().delete()
            
            total_count = count_iphone + count_macbook + count_ipad + count_apple_watch + count_product
            logger.info(f"–û—á–∏—â–µ–Ω–∞ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: —É–¥–∞–ª–µ–Ω–æ {total_count} —Ç–æ–≤–∞—Ä–æ–≤ (iPhone: {count_iphone}, MacBook: {count_macbook}, iPad: {count_ipad}, Apple Watch: {count_apple_watch}, Product: {count_product})")
            return total_count
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            return 0

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
db_service = DatabaseService()
